{"version":3,"mappings":"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","names":["define","this","helpers","data","buffer","escapeExpression","helper","stack1","self","hb","MathJax","postRender","$element","window","defaultValue","value","interaction","MathEntryInteractionStateQuestion","$prompt","containerEditor","change","mathRenderer","markup","markupSelector","related","areaBroker","toBoolean","stateFactory","simpleEditor","$gapStyleBox","$gapStyleSelector","_widget","$form","response","serial","formTpl","identifier","authorizeWhiteSpace","useGapExpression","focusOnDenominator","tool_frac","tool_sqrt","tool_exp","tool_log","tool_ln","tool_e","tool_infinity","squarebkts","tool_pi","tool_cos","tool_sin","tool_lte","tool_gte","tool_times","tool_divide","tool_plusminus","roundbkts","curlybkts","tool_angle","tool_minus","tool_plus","tool_equal","tool_lower","tool_greater","tool_subscript","tool_integral","tool_timesdot","tool_triangle","tool_similar","tool_paral","tool_perp","tool_inmem","tool_ninmem","tool_union","tool_intersec","allowNewLine","enableAutoWrap","formElement","i","configChangeCallBack","gapStyle","width","select2","minimumResultsForSearch","val","trigger","$container","$toolbar","$addGapBtn","Correct","__","_","$","Map","answerFormTpl","addAnswerOptionBtn","MathEntryInteractionStateResponse","correctResponses","$responseForm","find","on","gapCount","newCorrectAnswer","mapEntries","string","widget","element","offPci","click","e","emptyGapFields","base","$entryConfig","off","remove","responseDeclaration","clearMapEntries","getProperties","prop","MathEntryInteractionWidget","Widget","$interaction","getTypeIdentifier","getWidget","getDefaultProperties","inResponseState","gapExpression","tool_lbrack","tool_rbrack","tool_lbrace","tool_rbrace","tool_lparen","tool_rparen","afterCreate","getMarkupTemplate","getMarkupData","defaultData"],"sources":["../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/propertiesForm!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/addGapBtn!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/helper/math.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/Question.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/Correct.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/answerForm!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/addAnswerOption!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/Map.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/states.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/Widget.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/markup!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/imsPciCreator.js"],"sourcesContent":["\ndefine('tpl!mathEntryInteraction/creator/tpl/propertiesForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \"checked=\\\"checked\\\"\";\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"style=\\\"display:none\\\"\";\n  }\n\n  buffer += \"<div class=\\\"panel\\\">\\n    <label for=\\\"\\\" class=\\\"has-icon\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Response identifier\", options) : helperMissing.call(depth0, \"__\", \"Response identifier\", options)))\n    + \"</label>\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n    <div class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options)))\n    + \"</div>\\n\\n    <input type=\\\"text\\\"\\n           name=\\\"identifier\\\"\\n           value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"\\n           placeholder=\\\"e.g. RESPONSE\\\"\\n           data-validate=\\\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=\";\n  if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\">\\n</div>\\n\\n<hr />\\n\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Options\", options) : helperMissing.call(depth0, \"__\", \"Options\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"authorizeWhiteSpace\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.authorizeWhiteSpace), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"authorize white space\", options) : helperMissing.call(depth0, \"__\", \"authorize white space\", options)))\n    + \"\\n    </label>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"useGapExpression\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.useGapExpression), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"use expression with gaps\", options) : helperMissing.call(depth0, \"__\", \"use expression with gaps\", options)))\n    + \"\\n    </label>\\n    <div class=\\\"panel mathgap-style-box\\\" \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.useGapExpression), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\\n        <label for=\\\"gapStyle\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Gap size\", options) : helperMissing.call(depth0, \"__\", \"Gap size\", options)))\n    + \"</label>\\n        <select name=\\\"gapStyle\\\" data-mathgap-style>\\n            <option value=\\\"math-gap-small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Small\", options) : helperMissing.call(depth0, \"__\", \"Small\", options)))\n    + \"</option>\\n            <option value=\\\"math-gap-medium\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Medium\", options) : helperMissing.call(depth0, \"__\", \"Medium\", options)))\n    + \"</option>\\n            <option value=\\\"math-gap-large\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Large\", options) : helperMissing.call(depth0, \"__\", \"Large\", options)))\n    + \"</option>\\n        </select>\\n    </div>\\n</div>\\n\\n<hr />\\n\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Functions\", options) : helperMissing.call(depth0, \"__\", \"Functions\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_sqrt\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_sqrt), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"1em\\\" width=\\\"1em\\\" viewBox=\\\"0 0 400 400\\\" version=\\\"1.0\\\">\\n            <path d=\\\"m193.39062 4.859375-50.8125 317.375-79.093743-160.71876-58.781256 29.46875l6.6250007 12.5 38.687495-17.75 96.875003 199.40625 58.6875-366.28124h144.71876v-14h-142.46876-10.21874-4.21876z\\\"></path>\\n            <text class=\\\"\\\">√</text>\\n        </svg>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"square root\", options) : helperMissing.call(depth0, \"__\", \"square root\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_frac\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_frac), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"fraction\", options) : helperMissing.call(depth0, \"__\", \"fraction\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_exp\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_exp), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        x&#8319; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"exponent\", options) : helperMissing.call(depth0, \"__\", \"exponent\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_subscript\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_subscript), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        x&#8336; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"subscript\", options) : helperMissing.call(depth0, \"__\", \"subscript\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_log\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_log), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"log\", options) : helperMissing.call(depth0, \"__\", \"log\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_ln\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_ln), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"ln\", options) : helperMissing.call(depth0, \"__\", \"ln\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Symbols\", options) : helperMissing.call(depth0, \"__\", \"Symbols\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_e\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_e), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        e\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_infinity\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_infinity), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8734;\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"roundbkts\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.roundbkts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        ( ) \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"parentheses/round brackets\", options) : helperMissing.call(depth0, \"__\", \"parentheses/round brackets\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"curlybkts\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.curlybkts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        { } \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"braces/curly brackets\", options) : helperMissing.call(depth0, \"__\", \"braces/curly brackets\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"squarebkts\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.squarebkts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        [ ] \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"square brackets\", options) : helperMissing.call(depth0, \"__\", \"square brackets\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_integral\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_integral), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#x222b; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Indefinite integral\", options) : helperMissing.call(depth0, \"__\", \"Indefinite integral\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Geometry\", options) : helperMissing.call(depth0, \"__\", \"Geometry\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_angle\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_angle), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &ang; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"angle\", options) : helperMissing.call(depth0, \"__\", \"angle\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_integral\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_integral), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Indefinite integral\", options) : helperMissing.call(depth0, \"__\", \"Indefinite integral\", options)))\n    + \"\\n        </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_triangle\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_triangle), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#9651; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"triangle\", options) : helperMissing.call(depth0, \"__\", \"triangle\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_similar\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_similar), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &sim; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"similar\", options) : helperMissing.call(depth0, \"__\", \"similar\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_paral\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_paral), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8741; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is parallel with\", options) : helperMissing.call(depth0, \"__\", \"is parallel with\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_perp\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_perp), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8869; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is perpendicular to\", options) : helperMissing.call(depth0, \"__\", \"is perpendicular to\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Trigonometry\", options) : helperMissing.call(depth0, \"__\", \"Trigonometry\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_pi\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_pi), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &pi;\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_cos\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_cos), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"cosinus\", options) : helperMissing.call(depth0, \"__\", \"cosinus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_sin\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_sin), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"sinus\", options) : helperMissing.call(depth0, \"__\", \"sinus\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Comparison\", options) : helperMissing.call(depth0, \"__\", \"Comparison\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_lower\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_lower), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &lt; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"lower than\", options) : helperMissing.call(depth0, \"__\", \"lower than\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_greater\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_greater), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &gt; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"greater than\", options) : helperMissing.call(depth0, \"__\", \"greater than\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_lte\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_lte), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"≤\", options) : helperMissing.call(depth0, \"__\", \"≤\", options)))\n    + \" \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"lower than or equal\", options) : helperMissing.call(depth0, \"__\", \"lower than or equal\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_gte\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_gte), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"≥\", options) : helperMissing.call(depth0, \"__\", \"≥\", options)))\n    + \" \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"greater than or equal\", options) : helperMissing.call(depth0, \"__\", \"greater than or equal\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Operands\", options) : helperMissing.call(depth0, \"__\", \"Operands\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_equal\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_equal), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        = \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"equal\", options) : helperMissing.call(depth0, \"__\", \"equal\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_plus\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_plus), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        + \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"plus\", options) : helperMissing.call(depth0, \"__\", \"plus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_minus\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_minus), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        – \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"minus\", options) : helperMissing.call(depth0, \"__\", \"minus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_times\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_times), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &times; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"times\", options) : helperMissing.call(depth0, \"__\", \"times\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_timesdot\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_timesdot), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        · \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"times dot\", options) : helperMissing.call(depth0, \"__\", \"times dot\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_divide\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_divide), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &divide; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"divide\", options) : helperMissing.call(depth0, \"__\", \"divide\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_plusminus\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_plusminus), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#177; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Plus/minus\", options) : helperMissing.call(depth0, \"__\", \"Plus/minus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_inmem\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_inmem), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is a member of\", options) : helperMissing.call(depth0, \"__\", \"is a member of\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_ninmem\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_ninmem), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is not a member of\", options) : helperMissing.call(depth0, \"__\", \"is not a member of\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_union\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_union), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"set union\", options) : helperMissing.call(depth0, \"__\", \"set union\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_intersec\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_intersec), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"set intersection\", options) : helperMissing.call(depth0, \"__\", \"set intersection\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n\\n<h3 class=\\\"txt-error\\\"><strong><span class=\\\"icon-warning\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Experimental only\", options) : helperMissing.call(depth0, \"__\", \"Experimental only\", options)))\n    + \"</strong></h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"allowNewLine\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.allowNewLine), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"allow line break\", options) : helperMissing.call(depth0, \"__\", \"allow line break\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"enableAutoWrap\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.enableAutoWrap), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"enable auto wrap\", options) : helperMissing.call(depth0, \"__\", \"enable auto wrap\", options)))\n    + \"\\n    </label>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/addGapBtn', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"add-option\\\">\\n    <span class=\\\"icon-add\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add gap\", options) : helperMissing.call(depth0, \"__\", \"Add gap\", options)))\n    + \"\\n</div>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2022 (original work) Open Assessment Technologies SA;\n */\ndefine('mathEntryInteraction/helper/math',['mathJax'], function (MathJax) {\n    'use strict';\n\n    // Do not wait between rendering each individual math element\n    // http://docs.mathjax.org/en/latest/api/hub.html\n    // https://github.com/oat-sa/tao-item-runner-qti-fe/blob/master/src/qtiCommonRenderer/renderers/Math.js\n    if (typeof MathJax !== 'undefined' && MathJax) {\n        MathJax.Hub.processSectionDelay = 0;\n    }\n\n    const mathRenderer = {\n        /**\n         * On dom element containing `<math>...</math>` MathML markup,\n         * run MathJax renderer (\"typeset\" it)\n         * @see https://github.com/oat-sa/tao-item-runner-qti-fe/blob/master/src/qtiCommonRenderer/renderers/Math.js\n         * @param {Object} $element\n         */\n        postRender: function postRender($element) {\n            if (typeof MathJax !== 'undefined' && MathJax) {\n                if (!window.MathJax) {\n                    window.MathJax = MathJax;\n                }\n                if ($element.length) {\n                    MathJax.Hub.Queue(['Typeset', MathJax.Hub, $element[0]]);\n                }\n            }\n        }\n    };\n\n    return mathRenderer;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2017 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/states/Question',[\n    'jquery',\n    'i18n',\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'taoQtiItem/qtiCreator/editor/simpleContentEditableElement',\n    'taoQtiItem/qtiCreator/editor/containerEditor',\n    'tpl!mathEntryInteraction/creator/tpl/propertiesForm',\n    'tpl!mathEntryInteraction/creator/tpl/addGapBtn',\n    'mathEntryInteraction/helper/math'\n], function($, __, stateFactory, Question, formElement, simpleEditor, containerEditor, formTpl, addGapBtnTpl, mathRenderer){\n    'use strict';\n\n    var $addGapBtn = $(addGapBtnTpl());\n\n    var MathEntryInteractionStateQuestion = stateFactory.extend(Question, function create(){\n        var $container = this.widget.$container,\n            $prompt = $container.find('.prompt'),\n            interaction = this.widget.element;\n\n        containerEditor.create($prompt, {\n            change : function(text){\n                interaction.data('prompt', text);\n                interaction.updateMarkup();\n                mathRenderer.postRender($prompt);\n            },\n            markup : interaction.markup,\n            markupSelector : '.prompt',\n            related : interaction,\n            areaBroker: this.widget.getAreaBroker()\n        });\n\n        if (toBoolean(interaction.prop('useGapExpression'), false)) {\n            this.createAddGapBtn();\n        }\n\n        this.addMathFieldListener();\n\n    }, function exit(){\n        var $container = this.widget.$container,\n            $prompt = $container.find('.prompt');\n\n        simpleEditor.destroy($container);\n        containerEditor.destroy($prompt);\n\n        this.removeAddGapBtn();\n    });\n\n    function toBoolean(value, defaultValue) {\n        if (typeof(value) === \"undefined\") {\n            return defaultValue;\n        } else {\n            return (value === true || value === \"true\");\n        }\n    }\n    /**\n     * Callback for configuration change\n     * @param {Object} interaction - the current interaction\n     * @param {String} value - new value of the changed property\n     * @param {String} name - changed property\n     */\n    function configChangeCallBack(interaction, value, name) {\n        interaction.prop(name, value);\n        interaction.triggerPci('configChange', [interaction.getProperties()]);\n    }\n\n    MathEntryInteractionStateQuestion.prototype.initForm = function initForm(){\n\n        var self = this,\n            _widget = this.widget,\n            $form = _widget.$form,\n            interaction = _widget.element,\n            response = interaction.getResponseDeclaration(),\n            $gapStyleBox,\n            $gapStyleSelector;\n\n        //render the form using the form template\n        $form.html(formTpl({\n            serial : response.serial,\n            identifier : interaction.attr('responseIdentifier'),\n\n            authorizeWhiteSpace: toBoolean(interaction.prop('authorizeWhiteSpace'), false),\n            useGapExpression: toBoolean(interaction.prop('useGapExpression'), false),\n            focusOnDenominator: toBoolean(interaction.prop('focusOnDenominator'), false),\n\n            tool_frac:      toBoolean(interaction.prop('tool_frac'),    true),\n            tool_sqrt:      toBoolean(interaction.prop('tool_sqrt'),    true),\n            tool_exp:       toBoolean(interaction.prop('tool_exp'),     true),\n            tool_log:       toBoolean(interaction.prop('tool_log'),     true),\n            tool_ln:        toBoolean(interaction.prop('tool_ln'),      true),\n            tool_e:         toBoolean(interaction.prop('tool_e'),       true),\n            tool_infinity:  toBoolean(interaction.prop('tool_infinity'),true),\n            squarebkts:     toBoolean(interaction.prop('tool_rbrack'),  true) && toBoolean(interaction.prop('tool_lbrack'), true),\n            tool_pi:        toBoolean(interaction.prop('tool_pi'),      true),\n            tool_cos:       toBoolean(interaction.prop('tool_cos'),     true),\n            tool_sin:       toBoolean(interaction.prop('tool_sin'),     true),\n            tool_lte:       toBoolean(interaction.prop('tool_lte'),     true),\n            tool_gte:       toBoolean(interaction.prop('tool_gte'),     true),\n            tool_times:     toBoolean(interaction.prop('tool_times'),   true),\n            tool_divide:    toBoolean(interaction.prop('tool_divide'),  true),\n            tool_plusminus: toBoolean(interaction.prop('tool_plusminus'),true),\n            roundbkts:      toBoolean(interaction.prop('tool_rparen'),  true) && toBoolean(interaction.prop('tool_lparen'), true),\n            curlybkts:      toBoolean(interaction.prop('tool_rbrace'),  true) && toBoolean(interaction.prop('tool_lbrace'), true),\n            tool_angle:     toBoolean(interaction.prop('tool_angle'),   true),\n            tool_minus:     toBoolean(interaction.prop('tool_minus'),   true),\n            tool_plus:      toBoolean(interaction.prop('tool_plus'),    true),\n            tool_equal:     toBoolean(interaction.prop('tool_equal'),   true),\n            tool_lower:     toBoolean(interaction.prop('tool_lower'),   true),\n            tool_greater:   toBoolean(interaction.prop('tool_greater'), true),\n            tool_subscript: toBoolean(interaction.prop('tool_subscript'),true),\n            tool_integral:  toBoolean(interaction.prop('tool_integral'),true),\n            tool_timesdot:  toBoolean(interaction.prop('tool_timesdot'),true),\n            tool_triangle:  toBoolean(interaction.prop('tool_triangle'),true),\n            tool_similar:   toBoolean(interaction.prop('tool_similar'), true),\n            tool_paral:     toBoolean(interaction.prop('tool_paral'),   true),\n            tool_perp:      toBoolean(interaction.prop('tool_perp'),    true),\n            tool_inmem:     toBoolean(interaction.prop('tool_inmem'),   true),\n            tool_ninmem:    toBoolean(interaction.prop('tool_ninmem'),  true),\n            tool_union:     toBoolean(interaction.prop('tool_union'),   true),\n            tool_intersec:  toBoolean(interaction.prop('tool_intersec'),true),\n            allowNewLine:   toBoolean(interaction.prop('allowNewLine'), false),\n            enableAutoWrap: toBoolean(interaction.prop('enableAutoWrap'), false)\n        }));\n\n        //init form javascript\n        formElement.initWidget($form);\n\n            //init data change callbacks\n            formElement.setChangeCallbacks($form, interaction, {\n                identifier: function(i, value){\n                response.id(value);\n                interaction.attr('responseIdentifier', value);\n            },\n            useGapExpression: function gapChangeCallback(i, value) {\n                if (toBoolean(value, false)) {\n                    self.createAddGapBtn();\n                    $gapStyleBox.show();\n                } else {\n                    i.prop('gapExpression', '');\n                    self.removeAddGapBtn();\n                    $gapStyleBox.hide();\n                }\n\n                response.attr('cardinality', 'single');\n                configChangeCallBack(i, value, 'useGapExpression');\n            },\n            gapStyle: function gapStyleChangeCallback(i, newStyle) {\n\n                i.prop('gapStyle', newStyle);\n\n                configChangeCallBack(i, newStyle, 'gapStyle');\n            },\n            authorizeWhiteSpace: configChangeCallBack,\n            focusOnDenominator: configChangeCallBack,\n\n            tool_frac:      configChangeCallBack,\n            tool_sqrt:      configChangeCallBack,\n            tool_exp:       configChangeCallBack,\n            tool_log:       configChangeCallBack,\n            tool_ln:        configChangeCallBack,\n            tool_e:         configChangeCallBack,\n            tool_infinity:  configChangeCallBack,\n            tool_pi:        configChangeCallBack,\n            tool_cos:       configChangeCallBack,\n            tool_sin:       configChangeCallBack,\n            tool_lte:       configChangeCallBack,\n            tool_gte:       configChangeCallBack,\n            tool_times:     configChangeCallBack,\n            tool_divide:    configChangeCallBack,\n            tool_plusminus: configChangeCallBack,\n            tool_angle:     configChangeCallBack,\n            tool_minus:     configChangeCallBack,\n            tool_plus:      configChangeCallBack,\n            tool_equal:     configChangeCallBack,\n            tool_lower:     configChangeCallBack,\n            tool_greater:   configChangeCallBack,\n            tool_subscript: configChangeCallBack,\n            tool_integral:  configChangeCallBack,\n            tool_timesdot:  configChangeCallBack,\n            tool_triangle:  configChangeCallBack,\n            tool_similar:   configChangeCallBack,\n            tool_paral:     configChangeCallBack,\n            tool_perp:      configChangeCallBack,\n            tool_inmem:     configChangeCallBack,\n            tool_ninmem:    configChangeCallBack,\n            tool_union:     configChangeCallBack,\n            tool_intersec:  configChangeCallBack,\n\n            squarebkts: function squarebktsChangeCallBack(i, value) {\n                i.prop('tool_lbrack', value);\n                i.prop('tool_rbrack', value);\n                i.triggerPci('configChange', [i.getProperties()]);\n            },\n            roundbkts: function roundbktsChangeCallBack(i, value) {\n                i.prop('tool_lparen', value);\n                i.prop('tool_rparen', value);\n                i.triggerPci('configChange', [i.getProperties()]);\n            },\n            curlybkts: function curlybktsChangeCallBack(i, value) {\n                i.prop('tool_lbrace', value);\n                i.prop('tool_rbrace', value);\n                i.triggerPci('configChange', [i.getProperties()]);\n            },\n\n            allowNewLine: configChangeCallBack,\n            enableAutoWrap: configChangeCallBack\n        });\n\n\n        $gapStyleBox = $form.find('.mathgap-style-box');\n        $gapStyleSelector = $gapStyleBox.find('[data-mathgap-style]');\n\n        $gapStyleSelector.select2({\n            width: '100%',\n            minimumResultsForSearch: Infinity\n        })\n        .val(interaction.prop('gapStyle'))\n        .trigger('change');\n    };\n\n    /**\n     * Change callback for editable math field\n     */\n\n    MathEntryInteractionStateQuestion.prototype.addMathFieldListener = function addMathFieldListener() {\n        var _widget = this.widget,\n            interaction = _widget.element;\n\n        interaction.onPci('responseChange', function(latex) {\n            if (toBoolean(interaction.prop('useGapExpression'), false)) {\n                interaction.prop('gapExpression', latex);\n            } else {\n                interaction.prop('gapExpression', '');\n            }\n        });\n    };\n\n    /**\n     * Display the \"Add Gap\" button\n     */\n    MathEntryInteractionStateQuestion.prototype.createAddGapBtn = function createAddGapBtn() {\n        var _widget = this.widget,\n            $container = _widget.$container,\n            $toolbar = $container.find('.toolbar'),\n            interaction =_widget.element;\n\n        if ($toolbar.length) {\n            $toolbar.after($addGapBtn);\n            $addGapBtn.on('click', function() {\n                interaction.getResponseDeclaration().removeMapEntries();\n                interaction.triggerPci('addGap');\n            });\n        }\n    };\n\n    /**\n     * Remove the \"Add Gap\" button from the DOM\n     */\n    MathEntryInteractionStateQuestion.prototype.removeAddGapBtn = function removeAddGapBtn() {\n        $addGapBtn.off('click');\n        $addGapBtn.remove();\n    };\n\n    return MathEntryInteractionStateQuestion;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2021 (original work) Open Assessment Technologies SA;\n */\ndefine('mathEntryInteraction/creator/widget/states/Correct',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/states/Correct'\n], function (stateFactory, Correct) {\n    'use strict';\n\n    var InteractionStateCorrect = stateFactory.create(\n        Correct,\n        function init() {\n            this.widget.element.getResponseDeclaration().setTemplate('MAP_RESPONSE');\n            this.widget.changeState('map');\n        },\n        function exit() {\n        }\n    );\n\n    return InteractionStateCorrect;\n});\n\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/answerForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n                <div class=\\\"correct-answer-entry\\\" data-index=\\\"\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"\\\">\\n                    <p>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Correct answer option\", options) : helperMissing.call(depth0, \"__\", \"Correct answer option\", options)))\n    + \" \"\n    + escapeExpression((helper = helpers.increaseIndex || (depth0 && depth0.increaseIndex),options={hash:{},data:data},helper ? helper.call(depth0, (data == null || data === false ? data : data.index), options) : helperMissing.call(depth0, \"increaseIndex\", (data == null || data === false ? data : data.index), options)))\n    + \"</p>\\n                    <a href=\\\"#\\\" class=\\\"answer-edit\\\">\\n                        <span class=\\\"icon-edit\\\"></span>\\n                        <span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"edit the answer\", options) : helperMissing.call(depth0, \"__\", \"edit the answer\", options)))\n    + \"</span>\\n                    </a>\\n\\n                    <br>\\n\\n                    <a href=\\\"#\\\" class=\\\"answer-delete\\\">\\n                        <span class=\\\"icon-bin\\\"></span>\\n                        <span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"delete the answer\", options) : helperMissing.call(depth0, \"__\", \"delete the answer\", options)))\n    + \"</span>\\n                    </a>\\n                </div>\\n                <br>\\n                \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"panel mathEntryInteraction\\\">\\n    <hr>\\n    <h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Define correct responses\", options) : helperMissing.call(depth0, \"__\", \"Define correct responses\", options)))\n    + \":</h3>\\n    <div class=\\\"answer-entries-config\\\" data-config-for-hot-uid=\\\"\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"\\\">\\n        <div class=\\\"panel\\\">\\n            <div class=\\\"entry-config\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.correctAnswerEntries), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/addAnswerOption', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<button class=\\\"add-answer-option btn-info\\\">\\n    <i class=\\\"adder\\\"> </i> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add answer option\", options) : helperMissing.call(depth0, \"__\", \"Add answer option\", options)))\n    + \"\\n</button>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2021 (original work) Open Assessment Technologies SA;\n */\ndefine('mathEntryInteraction/creator/widget/states/Map',[\n    'handlebars',\n    'i18n',\n    'lodash',\n    'jquery',\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/states/Map',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'tpl!mathEntryInteraction/creator/tpl/answerForm',\n    'tpl!mathEntryInteraction/creator/tpl/addAnswerOption',\n], function (\n    hb,\n    __,\n    _,\n    $,\n    stateFactory,\n    Map,\n    formElement,\n    answerFormTpl,\n    addAnswerOptionBtn\n) {\n    'use strict';\n    var CORRECT_ANSWER_VALUE = 1;\n    hb.registerHelper('increaseIndex', function (value, options) {\n        return parseInt(value) + 1;\n    });\n\n    var MathEntryInteractionStateResponse = stateFactory.create(\n        Map,\n        function init() {\n            this.initGlobalVariables();\n            this.initForm();\n        },\n        function exit() {\n            this.emptyGapFields();\n            this.toggleResponseMode(false);\n            this.saveAnswers();\n            this.removeResponseChangeEventListener();\n            this.removeEditDeleteListeners();\n            this.removeAddButtonListener();\n            this.destroyForm();\n        }\n    );\n\n\n    MathEntryInteractionStateResponse.prototype.initGlobalVariables = function initGlobalVariables() {\n        var self = this,\n            interaction = self.widget.element;\n        self.activeEditId = null;\n        self.correctResponses = [];\n\n        if (this.inGapMode(self) === true) {\n            interaction = self.widget.element;\n            self.gapTemplate = interaction.prop('gapExpression');\n        }\n    }\n\n    MathEntryInteractionStateResponse.prototype.initForm = function initForm() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm;\n\n        this.initResponseChangeEventListener();\n        self.correctResponses = this.getExistingCorrectAnswerOptions();\n        $responseForm.html(addAnswerOptionBtn());\n        this.initAddAnswerButton();\n        this.renderForm(self.correctResponses);\n    }\n\n    MathEntryInteractionStateResponse.prototype.initAddAnswerButton = function initAddAnswerButton() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm,\n            $addAnswerBtn = $responseForm.find($('.add-answer-option'));\n\n        $addAnswerBtn.on('click', function () {\n            var newCorrectAnswer;\n\n            if (self.inGapMode() === true) {\n                self.emptyGapFields();\n                var gapExpression = interaction.prop('gapExpression');\n                var gapCount = (gapExpression.match(/\\\\taoGap/g) || []).length;\n                if (gapCount > 0) {\n                    newCorrectAnswer = [];\n                    for (var i = 0; i < gapCount; i++) {\n                        newCorrectAnswer.push(' ');\n                    }\n\n                    newCorrectAnswer = newCorrectAnswer.join(',');\n                } else {\n                    newCorrectAnswer = '';\n                }\n            } else {\n                newCorrectAnswer = '';\n                self.toggleResponseMode(false);\n            }\n\n            self.correctResponses.push(newCorrectAnswer);\n            self.renderForm(self.correctResponses);\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.getExistingCorrectAnswerOptions = function getExistingCorrectAnswerOptions() {\n        var self = this,\n            interaction = self.widget.element;\n\n        var mapEntries = interaction.getResponseDeclaration().getMapEntries();\n        return _.keys(mapEntries) || [];\n    }\n\n    MathEntryInteractionStateResponse.prototype.initResponseChangeEventListener = function initResponseChangeEventListener() {\n        var self = this,\n            interaction = self.widget.element;\n\n        interaction.onPci('responseChange', function (latex) {\n            if (self.inGapMode(self) === false && self.activeEditId !== null) {\n                self.correctResponses[self.activeEditId] = latex;\n            } else if (self.inGapMode(self) === true && self.activeEditId !== null) {\n                var response = interaction.getResponse();\n                if (response !== null) {\n                    self.correctResponses[self.activeEditId] = response.base.string;\n                }\n            }\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.removeResponseChangeEventListener = function removeResponseChangeEventListener() {\n        var self = this,\n            interaction = self.widget.element;\n\n        interaction.offPci('responseChange');\n    }\n\n    MathEntryInteractionStateResponse.prototype.initEditingOptions = function initEditingOptions() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm,\n            $entryConfig = $responseForm.find('.entry-config'),\n            $editButtons = $entryConfig.find('.answer-edit');\n\n        $editButtons.click(function (e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            self.toggleResponseMode(true);\n            var selectedEditId = parseInt($(e.target).closest('div').attr('data-index'));\n\n            if (self.activeEditId !== selectedEditId) {\n\n                if (self.inGapMode() === true) {\n                    self.activeEditId = selectedEditId;\n                    var response = self.getGapResponseObject(self.correctResponses[self.activeEditId]);\n                    interaction.triggerPci('latexGapInput', [response]);\n                } else {\n                    self.activeEditId = selectedEditId;\n                    interaction.triggerPci('latexInput', [self.correctResponses[self.activeEditId]]);\n                }\n            } else {\n                self.emptyGapFields();\n            }\n        });\n    }\n\n    // forming gap response object to be further processed by the latexGapInput event\n    MathEntryInteractionStateResponse.prototype.getGapResponseObject = function getGapResponseObject(response) {\n        return {\n            base: {\n                string: response.split(',')\n            }\n        }\n    }\n\n    // removing all saved map entries\n    MathEntryInteractionStateResponse.prototype.clearMapEntries = function clearMapEntries() {\n        var self = this,\n            interaction = self.widget.element,\n            response = interaction.getResponseDeclaration(),\n            mapEntries = response.getMapEntries();\n\n        _.keys(mapEntries).forEach(function (mapKey) {\n            response.removeMapEntry(mapKey, true);\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.initDeletingOptions = function initDeletingOptions() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm,\n            $entryConfig = $responseForm.find('.entry-config'),\n            $deleteButtons = $entryConfig.find('.answer-delete');\n\n        $deleteButtons.click(function (e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            var id = parseInt($(e.target).closest('div').attr('data-index'));\n\n            if (self.inGapMode() === true) {\n                self.activeEditId = id;\n                self.emptyGapFields();\n            } else {\n                self.activeEditId = null;\n                self.toggleResponseMode(false);\n            }\n\n            self.correctResponses.splice(id, 1);\n            self.renderForm(self.correctResponses);\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.renderForm = function renderForm(correctAnswerOptions) {\n        var self = this,\n            $responseForm = self.widget.$responseForm;\n\n        this.removeEditDeleteListeners();\n        $responseForm.find('.mathEntryInteraction').remove();\n        $responseForm.append(answerFormTpl({correctAnswerEntries: correctAnswerOptions}));\n        this.initDeletingOptions();\n        this.initEditingOptions();\n    }\n\n    /**\n     *   remove all event listeners to avoid any potential memory leaks\n     */\n    MathEntryInteractionStateResponse.prototype.removeEditDeleteListeners = function removeEditDeleteListeners() {\n        var self = this,\n            $entryConfig = self.widget.$responseForm.find('.entry-config');\n\n        $entryConfig.find('.answer-edit').off('click');\n        $entryConfig.find('.answer-delete').off('click');\n    }\n\n    MathEntryInteractionStateResponse.prototype.removeAddButtonListener = function removeAddButtonListener() {\n        var self = this,\n            $responseForm = self.widget.$responseForm;\n\n        $responseForm.find($('.add-answer-option')).off('click');\n    }\n\n    MathEntryInteractionStateResponse.prototype.destroyForm = function destroyForm() {\n        var self = this,\n            $responseForm = self.widget.$responseForm;\n\n        $responseForm.find('.mathEntryInteraction').remove();\n    }\n\n    MathEntryInteractionStateResponse.prototype.saveAnswers = function saveAnswers() {\n        var self = this,\n            interaction = self.widget.element,\n            responseDeclaration = interaction.getResponseDeclaration();\n\n        this.clearMapEntries();\n\n        if (this.inGapMode() === true) {\n            self.correctResponses = self.correctResponses.filter(function (response) {\n                return response.split(',').indexOf('') === -1;\n            });\n        }\n\n        self.correctResponses.forEach(function (response) {\n            responseDeclaration.setMapEntry(response, CORRECT_ANSWER_VALUE, false);\n        });\n    }\n\n    /**\n     *   if in gap mode: will empty all the gap fields\n     */\n    MathEntryInteractionStateResponse.prototype.emptyGapFields = function emptyGapFields() {\n        var self = this,\n            interaction = self.widget.element;\n\n        if (this.inGapMode() === true) {\n            self.activeEditId = null;\n\n            interaction.prop('gapExpression', self.gapTemplate);\n            this.toggleResponseMode(false);\n        }\n    }\n\n    MathEntryInteractionStateResponse.prototype.toggleResponseMode = function toggleResponseMode(value) {\n        var self = this,\n            interaction = self.widget.element;\n\n        if (interaction.prop('inResponseState') !== value) {\n            interaction.prop('inResponseState', value);\n            interaction.triggerPci('configChange', [interaction.getProperties()]);\n        }\n    }\n\n    MathEntryInteractionStateResponse.prototype.inGapMode = function inGapMode() {\n        var self = this,\n            interaction = self.widget.element;\n\n        return interaction.prop('useGapExpression');\n    }\n\n    return MathEntryInteractionStateResponse;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'mathEntryInteraction/creator/widget/states/Question',\n    'mathEntryInteraction/creator/widget/states/Correct',\n    'mathEntryInteraction/creator/widget/states/Map'\n], function(factory, states){\n    'use strict';\n\n    return factory.createBundle(states, arguments);\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'mathEntryInteraction/creator/widget/states/states'\n], function(Widget, states){\n    'use strict';\n\n    var MathEntryInteractionWidget = Widget.clone();\n\n    MathEntryInteractionWidget.initCreator = function initCreator() {\n        var $interaction;\n\n        this.registerStates(states);\n\n        Widget.initCreator.call(this);\n\n        $interaction = this.$container.find('.mathEntryInteraction');\n        if ($interaction.length) {\n            $interaction.addClass('tao-qti-creator-context');\n        }\n    };\n\n    return MathEntryInteractionWidget;\n});\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/markup', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"mathEntryInteraction\\\">\\n    <div class=\\\"prompt\\\">\";\n  if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n    <div class=\\\"math-entry\\\">\\n        <div class=\\\"toolbar\\\"></div>\\n        <div>\\n            <span class=\\\"math-entry-input\\\"></span>\\n        </div>\\n    </div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA;\n *\n * @author Christophe Noël <christophe@taotesting.com>\n *\n */\n\ndefine('mathEntryInteraction/imsPciCreator',[\n    'lodash',\n    'mathEntryInteraction/creator/widget/Widget',\n    'tpl!mathEntryInteraction/creator/tpl/markup'\n], function (_, Widget, markupTpl) {\n    'use strict';\n\n    var _typeIdentifier = 'mathEntryInteraction';\n\n    var mathEntryInteractionCreator = {\n        /**\n         * (required) Get the typeIdentifier of the custom interaction\n         *\n         * @returns {String}\n         */\n        getTypeIdentifier: function getTypeIdentifier() {\n            return _typeIdentifier;\n        },\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         *\n         * @returns {Object} Widget\n         */\n        getWidget: function getWidget() {\n            return Widget;\n        },\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        getDefaultProperties: function getDefaultProperties() {\n            return {\n                authorizeWhiteSpace: 'false',\n                useGapExpression: 'false',\n                inResponseState: 'false',\n                gapExpression: '',\n                gapStyle: '',\n                focusOnDenominator: false,\n\n                tool_frac: 'true',\n                tool_sqrt: 'true',\n                tool_exp: 'true',\n                tool_log: 'true',\n                tool_ln: 'true',\n                tool_e: 'true',\n                tool_infinity: 'true',\n                tool_lbrack: 'true',\n                tool_rbrack: 'true',\n                tool_pi: 'true',\n                tool_cos: 'true',\n                tool_sin: 'true',\n                tool_lte: 'true',\n                tool_gte: 'true',\n                tool_times: 'true',\n                tool_divide: 'true',\n                tool_plusminus: 'true',\n                tool_angle: 'true',\n                tool_minus: 'true',\n                tool_plus: 'true',\n                tool_equal: 'true',\n                tool_lower: 'true',\n                tool_greater: 'true',\n                tool_subscript: 'true',\n                tool_lbrace: 'true',\n                tool_rbrace: 'true',\n                tool_lparen: 'true',\n                tool_rparen: 'true',\n                tool_integral: 'true',\n                tool_timesdot: 'true',\n                tool_triangle: 'true',\n                tool_similar: 'true',\n                tool_paral: 'true',\n                tool_perp: 'true',\n                tool_inmem: 'true',\n                tool_ninmem: 'true',\n                tool_union: 'true',\n                tool_intersec: 'true',\n                allowNewLine: 'false',\n                enableAutoWrap: 'false'\n            };\n        },\n        /**\n         * (optional) Callback to execute on the\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        afterCreate: function afterCreate(pci) {\n            //do some stuff\n        },\n        /**\n         * (required) Gives the qti pci xml template\n         *\n         * @returns {function} handlebar template\n         */\n        getMarkupTemplate: function getMarkupTemplate() {\n            return markupTpl;\n        },\n        /**\n         * (optional) Allows passing additional data to xml template\n         *\n         * @returns {function} handlebar template\n         */\n        getMarkupData: function getMarkupData(pci, defaultData) {\n            defaultData.prompt = pci.data('prompt');\n            return defaultData;\n        }\n    };\n\n    //since we assume we are in a tao context, there is no use to expose the a global object for lib registration\n    //all libs should be declared here\n    return mathEntryInteractionCreator;\n});\n\n"]}