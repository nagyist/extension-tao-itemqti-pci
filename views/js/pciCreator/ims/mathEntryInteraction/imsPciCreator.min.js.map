{"version":3,"mappings":"AACAA,yFACA,qEAKA,oBAGA,2BACA,CARA,gCADA,CAEAC,8CAFA,CAEAC,aAFA,CAGA,yHA0TA,MA5SAC,0EACAC,2MADA,CAEA,0KAFA,CAGAA,+yBAHA,CAIA,yFAwSA,EAvSAC,yBAuSA,EAvSAC,8CAuSA,EAtSAD,gCAsSA,CAtSAC,gFAsSA,EArSAH,iCACA,kIAoSA,EAnSAE,qBAmSA,EAnSAC,8CAmSA,EAlSAD,4BAkSA,CAlSAC,gFAkSA,EAjSAH,iCACA,iCADA,CAEAC,mLAFA,CAGA,6GA8RA,CA7RAE,2IA6RA,EA5RAA,kBA4RA,IA5RAH,cA4RA,EA3RAA,sEACAC,+MADA,CAEA,0GAyRA,CAxRAE,wIAwRA,EAvRAA,kBAuRA,IAvRAH,cAuRA,EAtRAA,sEACAC,qNADA,CAEA,6DAoRA,CAnRAE,+GA/BA,WAGA,8BACA,CA2BA,kBAmRA,EAlRAA,kBAkRA,IAlRAH,cAkRA,EAjRAA,8CACAC,qLADA,CAEA,gHAFA,CAGAA,+KAHA,CAIA,2DAJA,CAKAA,iLALA,CAMA,0DANA,CAOAA,+KAPA,CAQA,oEARA,CASAA,uLATA,CAUA,mGAuQA,CAtQAE,iIAsQA,EArQAA,kBAqQA,IArQAH,cAqQA,EApQAA,udACAC,2LADA,CAEA,kHAkQA,CAjQAE,iIAiQA,EAhQAA,kBAgQA,IAhQAH,cAgQA,EA/PAA,sEACAC,qLADA,CAEA,iHA6PA,CA5PAE,gIA4PA,EA3PAA,kBA2PA,IA3PAH,cA2PA,EA1PAA,+EACAC,qLADA,CAEA,uHAwPA,CAvPAE,sIAuPA,EAtPAA,kBAsPA,IAtPAH,cAsPA,EArPAA,+EACAC,uLADA,CAEA,iHAmPA,CAlPAE,gIAkPA,EAjPAA,kBAiPA,IAjPAH,cAiPA,EAhPAA,sEACAC,2KADA,CAEA,gHA8OA,CA7OAE,+HA6OA,EA5OAA,kBA4OA,IA5OAH,cA4OA,EA3OAA,sEACAC,yKADA,CAEA,mHAyOA,CAxOAE,kIAwOA,EAvOAA,kBAuOA,IAvOAH,cAuOA,EAtOAA,sEACAC,+KADA,CAEA,iHAoOA,CAnOAE,gIAmOA,EAlOAA,kBAkOA,IAlOAH,cAkOA,EAjOAA,sEACAC,2KADA,CAEA,qHA+NA,CA9NAE,oIA8NA,EA7NAA,kBA6NA,IA7NAH,cA6NA,EA5NAA,sEACAC,iLADA,CAEA,sCAFA,CAGAA,mLAHA,CAIA,gGAwNA,CAvNAE,8HAuNA,EAtNAA,kBAsNA,IAtNAH,cAsNA,EArNAA,0LAqNA,CApNAG,qIAoNA,EAnNAA,kBAmNA,IAnNAH,cAmNA,EAlNAA,4LAkNA,CAjNAG,iIAiNA,EAhNAA,kBAgNA,IAhNAH,cAgNA,EA/MAA,0EACAC,yNADA,CAEA,kHA6MA,CA5MAE,iIA4MA,EA3MAA,kBA2MA,IA3MAH,cA2MA,EA1MAA,0EACAC,+MADA,CAEA,mHAwMA,CAvMAE,kIAuMA,EAtMAA,kBAsMA,IAtMAH,cAsMA,EArMAA,0EACAC,mMADA,CAEA,sHAmMA,CAlMAE,qIAkMA,EAjMAA,kBAiMA,IAjMAH,cAiMA,EAhMAA,+EACAC,2MADA,CAEA,mHA8LA,CA7LAE,kIA6LA,EA5LAA,kBA4LA,IA5LAH,cA4LA,EA3LAA,wEACAC,+KADA,CAEA,gHAyLA,CAxLAE,+HAwLA,EAvLAA,kBAuLA,IAvLAH,cAuLA,EAtLAA,+EACAC,2LADA,CAEA,wCAFA,CAGAA,qLAHA,CAIA,oGAkLA,CAjLAE,kIAiLA,EAhLAA,kBAgLA,IAhLAH,cAgLA,EA/KAA,4EACAC,+KADA,CAEA,sHA6KA,CA5KAE,qIA4KA,EA3KAA,kBA2KA,IA3KAH,cA2KA,EA1KAA,sEACAC,2MADA,CAEA,0HAwKA,CAvKAE,qIAuKA,EAtKAA,kBAsKA,IAtKAH,cAsKA,EArKAA,8EACAC,qLADA,CAEA,qHAmKA,CAlKAE,oIAkKA,EAjKAA,kBAiKA,IAjKAH,cAiKA,EAhKAA,4EACAC,mLADA,CAEA,mHA8JA,CA7JAE,kIA6JA,EA5JAA,kBA4JA,IA5JAH,cA4JA,EA3JAA,8EACAC,qMADA,CAEA,kHAyJA,CAxJAE,iIAwJA,EAvJAA,kBAuJA,IAvJAH,cAuJA,EAtJAA,8EACAC,2MADA,CAEA,wCAFA,CAGAA,6LAHA,CAIA,iGAkJA,CAjJAE,+HAiJA,EAhJAA,kBAgJA,IAhJAH,cAgJA,EA/IAA,wLA+IA,CA9IAG,gIA8IA,EA7IAA,kBA6IA,IA7IAH,cA6IA,EA5IAA,sEACAC,mLADA,CAEA,iHA0IA,CAzIAE,gIAyIA,EAxIAA,kBAwIA,IAxIAH,cAwIA,EAvIAA,sEACAC,+KADA,CAEA,iHAqIA,CApIAE,gIAoIA,EAnIAA,kBAmIA,IAnIAH,cAmIA,EAlIAA,sEACAC,mLADA,CAEA,sCAFA,CAGAA,yLAHA,CAIA,oGA8HA,CA7HAE,kIA6HA,EA5HAA,kBA4HA,IA5HAH,cA4HA,EA3HAA,2EACAC,yLADA,CAEA,qHAyHA,CAxHAE,oIAwHA,EAvHAA,kBAuHA,IAvHAH,cAuHA,EAtHAA,2EACAC,6LADA,CAEA,iHAoHA,CAnHAE,gIAmHA,EAlHAA,kBAkHA,IAlHAH,cAkHA,EAjHAA,sEACAC,iLADA,CAEA,GAFA,CAGAA,2MAHA,CAIA,iHA6GA,CA5GAE,gIA4GA,EA3GAA,kBA2GA,IA3GAH,cA2GA,EA1GAA,sEACAC,iLADA,CAEA,GAFA,CAGAA,+MAHA,CAIA,wCAJA,CAKAA,qLALA,CAMA,oGAoGA,CAnGAE,kIAmGA,EAlGAA,kBAkGA,IAlGAH,cAkGA,EAjGAA,wEACAC,+KADA,CAEA,kHA+FA,CA9FAE,iIA8FA,EA7FAA,kBA6FA,IA7FAH,cA6FA,EA5FAA,wEACAC,6KADA,CAEA,mHA0FA,CAzFAE,kIAyFA,EAxFAA,kBAwFA,IAxFAH,cAwFA,EAvFAA,6EACAC,+KADA,CAEA,mHAqFA,CApFAE,kIAoFA,EAnFAA,kBAmFA,IAnFAH,cAmFA,EAlFAA,8EACAC,+KADA,CAEA,sHAgFA,CA/EAE,qIA+EA,EA9EAA,kBA8EA,IA9EAH,cA8EA,EA7EAA,2EACAC,uLADA,CAEA,oHA2EA,CA1EAE,mIA0EA,EAzEAA,kBAyEA,IAzEAH,cAyEA,EAxEAA,+EACAC,iLADA,CAEA,uHAsEA,CArEAE,sIAqEA,EApEAA,kBAoEA,IApEAH,cAoEA,EAnEAA,6EACAC,yLADA,CAEA,mHAiEA,CAhEAE,kIAgEA,EA/DAA,kBA+DA,IA/DAH,cA+DA,EA9DAA,sEACAC,iMADA,CAEA,oHA4DA,CA3DAE,mIA2DA,EA1DAA,kBA0DA,IA1DAH,cA0DA,EAzDAA,sEACAC,yMADA,CAEA,mHAuDA,CAtDAE,kIAsDA,EArDAA,kBAqDA,IArDAH,cAqDA,EApDAA,sEACAC,uLADA,CAEA,sHAkDA,CAjDAE,qIAiDA,EAhDAA,kBAgDA,IAhDAH,cAgDA,EA/CAA,sEACAC,qMADA,CAEA,uHA6CA,CA5CAE,sIA4CA,EA3CAA,kBA2CA,IA3CAH,cA2CA,EA1CAA,+EACAC,uLADA,CAEA,oHAwCA,CAvCAE,mIAuCA,EAtCAA,kBAsCA,IAtCAH,cAsCA,EArCAA,+EACAC,iLADA,CAEA,sHAmCA,CAlCAE,qIAkCA,EAjCAA,kBAiCA,IAjCAH,cAiCA,EAhCAA,+EACAC,qLADA,CAEA,sHA8BA,CA7BAE,qIA6BA,EA5BAA,kBA4BA,IA5BAH,cA4BA,EA3BAA,+EACAC,yMADA,CAEA,wCAFA,CAGAA,iLAHA,CAIA,wGAuBA,CAtBAE,wIAsBA,EArBAA,kBAqBA,IArBAH,cAqBA,EApBAA,sEACAC,iLADA,CAEA,8HAkBA,CAjBAE,6IAiBA,EAhBAA,kBAgBA,IAhBAH,cAgBA,EAfAA,sEACAC,yMADA,CAEA,yGAFA,CAGAA,uMAHA,CAIA,+GAWA,CAVAE,oIAUA,EATAA,kBASA,IATAH,cASA,EARAA,sEACAC,qMADA,CAEA,uHAMA,CALAE,sIAKA,EAJAA,kBAIA,IAJAH,cAIA,EAHAA,sEACAC,qMADA,CAEA,wBACA,OACA,CA9TA,CA+TA,CAhUA,C,CCAAJ,oFACA,qEACA,gCADA,CAEAC,8CAFA,CAEAC,aAFA,CAGA,wGAMA,MAHAC,6EACAC,mLADA,CAEA,UACA,OACA,CAVA,CAWA,CAZA,C,CCgBAJ,uGACA,aASA,sBACAO,OADA,CAEAC,iBAFA,CAIAC,wBACAC,GADA,CACA,kDADA,EAEAC,IAFA,GAGAC,IAHA,CAGAC,eACAN,SADA,CAEAO,gEAFA,CASAA,oBATA,GAUAA,iCAVA,CAYA,CAfA,CAgBA,CA9BA,GAGAA,QAHA,CAIAP,SAJA,CA4DA,MA5BA,CAOAQ,+CACA,iCADA,CAEAP,iBAFA,CAIAG,iBACAG,0DADA,GAMA,eANA,GAOAE,sBAPA,EASAC,eATA,EAUAH,sDAVA,CAaA,CAbA,CAcA,CAzBA,CA6BA,CA7DA,C,CCCAd,8DACA,QADA,CAEA,MAFA,CAGA,8CAHA,CAIA,4DAJA,CAKA,mDALA,CAMA,2DANA,CAOA,8CAPA,CAQA,qDARA,CASA,gDATA,CAUA,kDAVA,EAWA,gHACA,aAwCA,6CACA,yBADA,CAEAkB,YAFA,CAIA,0BAEA,CAOA,sDACAC,4BADA,CAEAA,oEACA,CAzDA,GAGAC,6BAHA,CAKAC,iFACA,sCACAC,kCADA,CAEAH,+BAFA,CAIAI,gCACAC,sBACAL,+BADA,CAEAA,0BAFA,CAIAG,qDAJA,EAKAG,gCAEA,CARA,CASAC,yBATA,CAUAC,wBAVA,CAWAC,mBAXA,CAYAC,sCAZA,EALA,CAoBAC,kDApBA,EAqBA,sBArBA,CAwBA,2BAEA,CA1BA,CA0BA,gBACA,sCACAR,kCADA,CAGAS,gCAJA,CAKAR,gCALA,CAOA,sBACA,CAlCA,CALA,CAwRA,MA7NAF,0EAEA,GAKAW,aALA,CAMAC,iBANA,WACAC,mBADA,CAEAC,mBAFA,CAGAhB,2BAHA,CAIAiB,6CAJA,CASAD,oBACAE,sBADA,CAEAC,iDAFA,CAIAC,yEAJA,CAKAC,mEALA,CAMAC,uEANA,CAQAC,qDARA,CASAC,qDATA,CAUAC,mDAVA,CAWAC,mDAXA,CAYAC,iDAZA,CAaAC,uDAbA,CAcAC,mDAdA,CAeAC,2DAfA,CAgBAC,+CAhBA,CAiBAC,6DAjBA,CAkBAC,uGAlBA,CAmBAC,iDAnBA,CAoBAC,mDApBA,CAqBAC,mDArBA,CAsBAC,8CAtBA,CAuBAC,mDAvBA,CAwBAC,mDAxBA,CAyBAC,uDAzBA,CA0BAC,yDA1BA,CA2BAC,+DA3BA,CA4BAC,sGA5BA,CA6BAC,sGA7BA,CA8BAC,uDA9BA,CA+BAC,uDA/BA,CAgCAC,qDAhCA,CAiCAC,uDAjCA,CAkCAC,uDAlCA,CAmCAC,2DAnCA,CAoCAC,+DApCA,CAqCAC,6DArCA,CAsCAC,6DAtCA,CAuCAC,6DAvCA,CAwCAC,2DAxCA,CAyCAC,uDAzCA,CA0CAC,qDA1CA,CA2CAC,uDA3CA,CA4CAC,yDA5CA,CA6CAC,uDA7CA,CA8CAC,6DA9CA,CA+CAC,uDA/CA,CAgDAC,iDAhDA,CAiDAC,+DAjDA,CAkDAC,yDAlDA,CAmDAC,6DAnDA,CAoDAC,6DApDA,CAqDAC,mEArDA,CAsDAC,6EAtDA,CAuDAC,2DAvDA,CAwDAC,+DAxDA,GAXA,CAuEAC,6BAvEA,CA0EAA,kDACArD,6BACAF,kBADA,CAEAjB,4CACA,CAJA,CAKAqB,qDACAV,mBADA,EAEA8D,sBAFA,CAGA5D,mBAHA,GAKA6D,0BALA,CAMAD,sBANA,CAOA5D,mBAPA,EAUAI,qCAVA,CAWA0D,gDACA,CAjBA,CAkBAC,qDAEAF,2BAFA,CAIAC,2CACA,CAvBA,CAwBAvD,wCAxBA,CAyBAE,uCAzBA,CA2BAC,8BA3BA,CA4BAC,8BA5BA,CA6BAC,6BA7BA,CA8BAC,6BA9BA,CA+BAC,4BA/BA,CAgCAC,+BAhCA,CAiCAC,6BAjCA,CAkCAC,iCAlCA,CAmCAC,2BAnCA,CAoCAC,kCApCA,CAqCAE,4BArCA,CAsCAC,6BAtCA,CAuCAC,6BAvCA,CAwCAC,6BAxCA,CAyCAC,6BAzCA,CA0CAC,6BA1CA,CA2CAC,+BA3CA,CA4CAC,gCA5CA,CA6CAC,mCA7CA,CA8CAG,+BA9CA,CA+CAC,+BA/CA,CAgDAC,8BAhDA,CAiDAC,+BAjDA,CAkDAC,+BAlDA,CAmDAC,iCAnDA,CAoDAC,mCApDA,CAqDAC,kCArDA,CAsDAC,kCAtDA,CAuDAC,kCAvDA,CAwDAC,iCAxDA,CAyDAC,+BAzDA,CA0DAC,8BA1DA,CA2DAC,+BA3DA,CA4DAC,gCA5DA,CA6DAC,+BA7DA,CA8DAC,kCA9DA,CA+DAC,+BA/DA,CAgEAC,4BAhEA,CAiEAC,mCAjEA,CAkEAC,gCAlEA,CAmEAC,kCAnEA,CAoEAC,kCApEA,CAqEAC,qCArEA,CAsEAC,0CAtEA,CAwEApC,sDACAyC,2BADA,CAEAA,2BAFA,CAGAA,gDACA,CA5EA,CA6EA/B,oDACA+B,2BADA,CAEAA,2BAFA,CAGAA,gDACA,CAjFA,CAkFA9B,oDACA8B,2BADA,CAEAA,2BAFA,CAGAA,gDACA,CAtFA,CAwFAJ,iCAxFA,CAyFAC,mCAzFA,EA1EA,CAuKA1D,6CAvKA,CAwKAC,2DAxKA,CA0KAA,2BACA+D,YADA,CAEAC,2BAFA,GAIAC,GAJA,CAIA/E,4BAJA,EAKAgF,OALA,CAKA,QALA,CAMA,CA6CA,CAvCA9E,iGACA,wBACAF,2BADA,CAGAA,mDACAW,kDADA,CAEAX,uCAFA,CAIAA,oCAEA,CANA,CAOA,CA4BA,CAvBAE,uFACA,wBACA+E,6BADA,CAEAC,oCAFA,CAGAlF,2BAHA,CAKAkF,eANA,GAOAA,0BAPA,CAQAjF,iCACAD,uDADA,CAEAA,gCACA,CAHA,CARA,CAaA,CAUA,CALAE,uFACAD,uBADA,CAEAA,mBACA,CAEA,kCACA,CApSA,C,CCDApB,6DACA,8CADA,CAEA,8CAFA,EAGA,+BACA,aAEA,gDACAsG,OADA,CAEA,gBACA,wEADA,CAEA,8BACA,CALA,CAMA,gBACA,CAPA,EAUA,8BACA,CAjBA,C,CChBAtG,qFACA,qEAKA,+BAEA,oCAYA,MAXAG,+EACAC,uHADA,CAEA,8BAFA,CAGAA,+MAHA,CAIA,GAJA,CAKAA,4QALA,CAMA,2JANA,CAOAA,mMAPA,CAQA,uNARA,CASAA,uMATA,CAUA,mGACA,OACA,CAnBA,gCADA,CAEAH,8CAFA,CAEAC,aAFA,CAGA,iJA2BA,MARAC,0EACAC,qNADA,CAEA,6EAFA,CAGAA,oHAHA,CAIA,gGAIA,CAHAE,2IAGA,EAFAA,kBAEA,IAFAH,cAEA,EADAA,sEACA,OACA,CA/BA,CAgCA,CAjCA,C,CCAAH,0FACA,qEACA,gCADA,CAEAC,8CAFA,CAEAC,aAFA,CAGA,wGAMA,MAHAC,wFACAC,uMADA,CAEA,aACA,OACA,CAVA,CAWA,CAZA,C,CCgBAJ,yDACA,YADA,CAEA,MAFA,CAGA,QAHA,CAIA,QAJA,CAKA,8CALA,CAMA,0CANA,CAOA,mDAPA,CAQA,iDARA,CASA,sDATA,EAUA,SACAuG,EADA,CAEAC,EAFA,CAGAC,CAHA,CAIAC,CAJA,CAKAC,YALA,CAMAC,GANA,CAOAjB,WAPA,CAQAkB,aARA,CASAC,kBATA,CAUA,CACA,aACA,2BACAP,0DACA,wBACA,CAFA,CAHA,CAOA,0DACAK,GADA,CAEA,gBACA,0BADA,CAEA,eACA,CALA,CAMA,gBACA,qBADA,CAEA,2BAFA,CAGA,kBAHA,CAIA,wCAJA,CAKA,gCALA,CAMA,8BANA,CAOA,kBACA,CAdA,EA0QA,MAxPAG,gGACA,cACA5F,+BADA,CAEAyE,sBAHA,CAIAA,wBAJA,CAMA,yBANA,GAOAzE,+BAPA,CAQAyE,kDARA,CAUA,CA8OA,CA5OAmB,yEACA,cACA5F,+BADA,CAEA6F,uCAFA,CAIA,sCALA,CAMApB,4DANA,CAOAoB,wCAPA,CAQA,0BARA,CASA,sCACA,CAkOA,CAhOAD,+FACA,cACA5F,+BADA,CAEA6F,uCAFA,CAGAC,yDAHA,CAKAA,oCACA,qBAEA,0BACArB,qBADA,IAEAsB,gDAFA,CAGAC,sDAHA,CAIA,eACAC,mBADA,CAEA,2BACAA,2BAGAA,2CACA,CAPA,IAQAA,oBAEA,CAdA,IAeAA,oBAfA,CAgBAxB,2BAhBA,CAmBAA,4CAtBA,CAuBAA,sCACA,CAxBA,CAyBA,CAiMA,CA/LAmB,0HACAnB,UADA,CAEAzE,+BAFA,CAIAkG,+DAJA,CAKA,6BACA,CAyLA,CAvLAN,uHACA,cACA5F,+BADA,CAGAA,mDACA,uDACAyE,8CADA,KAEA,yDACA,uCACA,eAFA,GAGAA,6DAHA,CAKA,CACA,CATA,CAUA,CAyKA,CAvKAmB,2HACA,cACA5F,+BADA,CAGAA,oCACA,CAkKA,CAhKA4F,6FACA,cACA5F,+BADA,CAEA6F,uCAFA,CAGAM,gDAHA,CAIAC,8CAJA,CAMAA,+BACAC,kBADA,CAEAA,4BAFA,CAGA5B,2BAHA,CAIA,2EAEA,sCAWAA,qBAXA,KAEA,2BACAA,gCADA,CAEA,iFACAzE,kDACA,CAJA,IAKAyE,iCALA,CAMAzE,+EAKA,CAnBA,CAoBA,CAqIA,CAlIA4F,yGACA,OACAU,MACAC,0BADA,CADA,CAKA,CA4HA,CAzHAX,uFACA,cACA5F,+BADA,CAEAiB,6CAFA,CAGAiF,mCAHA,CAKAZ,4CACArE,kCACA,CAFA,CAGA,CAgHA,CA9GA2E,+FACA,cACA5F,+BADA,CAEA6F,uCAFA,CAGAM,gDAHA,CAIAK,kDAJA,CAMAA,iCACAH,kBADA,CAEAA,4BAFA,CAGA,+DAEA,qBALA,EAMA5B,oBANA,CAOAA,qBAPA,GASAA,sBATA,CAUAA,2BAVA,EAaAA,kCAbA,CAcAA,sCACA,CAfA,CAgBA,CAuFA,CArFAmB,iGACA,cACAC,uCADA,CAGA,gCAJA,CAKAA,oDALA,CAMAA,gFANA,CAOA,0BAPA,CAQA,yBACA,CA4EA,CAvEAD,2GACA,cACAO,4DADA,CAGAA,8CAJA,CAKAA,gDACA,CAiEA,CA/DAP,uGACA,cACAC,uCADA,CAGAA,wDACA,CA0DA,CAxDAD,+EACA,cACAC,uCADA,CAGAA,oDACA,CAmDA,CAjDAD,+EACA,cACA5F,+BADA,CAEAyG,wDAFA,CAIA,sBALA,CAOA,qBAPA,GAQAhC,sEACA,0CACA,CAFA,CARA,EAaAA,iDACAgC,8CACA,CAFA,CAGA,CAiCA,CA5BAb,qFACA,cACA5F,+BADA,CAGA,qBAJA,GAKAyE,sBALA,CAOAzE,kDAPA,CAQA,2BARA,CAUA,CAkBA,CAhBA4F,kGACA,cACA5F,+BADA,CAGAA,2CAJA,GAKAA,yCALA,CAMAA,oEANA,CAQA,CAQA,CANA4F,8EACA5F,gCADA,CAEAqB,qDAFA,CAGA,uDACA,CAEA,kCACA,CAtSA,C,CCCAxC,4DACA,8CADA,CAEA,4EAFA,CAGA,qDAHA,CAIA,oDAJA,CAKA,gDALA,EAMA,yBACA,aAEA,6CACA,CAVA,C,CCAAA,qDACA,qEADA,CAEA,mDAFA,EAGA,wBACA,aAEA,8CAeA,MAbA6H,+DACA,iBAEA,2BAHA,CAKAC,6BALA,CAOAC,0DAPA,CAQAA,mBARA,EASAA,gDAEA,CAEA,2BACA,CAtBA,C,CCjBA/H,iFACA,qEACA,gCADA,CAEAC,8CAFA,CAEAC,aAFA,CAGA,oDAQA,MALAC,2EAKA,EAJAE,qBAIA,EAJAC,8CAIA,EAHAD,4BAGA,CAHAC,gFAGA,GAFAA,kBAEA,IAFAH,cAEA,EADAA,gMACA,OACA,CAZA,CAaA,CAdA,C,CCoBAH,6CACA,QADA,CAEA,4CAFA,CAGA,6CAHA,EAIA,6BACA,aADA,GAGAgI,uCAHA,CAKAC,6BAMAC,+CACA,4BACA,CARA,CAeAC,+BACA,aACA,CAjBA,CAwBAC,qDACA,OACA7F,2BADA,CAEAC,wBAFA,CAGA6F,uBAHA,CAIAnB,gBAJA,CAKAnB,WALA,CAMAtD,qBANA,CAQAC,gBARA,CASAC,gBATA,CAUAC,eAVA,CAWAC,eAXA,CAYAC,cAZA,CAaAC,iBAbA,CAcAC,eAdA,CAeAC,mBAfA,CAgBAsC,uBAhBA,CAiBAC,4BAjBA,CAkBAtC,aAlBA,CAmBAC,oBAnBA,CAoBAmF,kBApBA,CAqBAC,kBArBA,CAsBAlF,cAtBA,CAuBAC,eAvBA,CAwBAC,eAxBA,CAyBAC,eAzBA,CA0BAC,eA1BA,CA2BAC,eA3BA,CA4BAC,iBA5BA,CA6BAC,kBA7BA,CA8BAC,qBA9BA,CA+BAG,iBA/BA,CAgCAC,iBAhCA,CAiCAC,gBAjCA,CAkCAC,iBAlCA,CAmCAC,iBAnCA,CAoCAC,mBApCA,CAqCAC,qBArCA,CAsCAkE,kBAtCA,CAuCAC,kBAvCA,CAwCAC,kBAxCA,CAyCAC,kBAzCA,CA0CApE,oBA1CA,CA2CAC,oBA3CA,CA4CAC,oBA5CA,CA6CAC,mBA7CA,CA8CAC,iBA9CA,CA+CAC,gBA/CA,CAgDAC,iBAhDA,CAiDAC,kBAjDA,CAkDAC,iBAlDA,CAmDAC,oBAnDA,CAoDAC,iBApDA,CAqDAC,cArDA,CAsDAC,qBAtDA,CAuDAC,kBAvDA,CAwDAC,oBAxDA,CAyDAC,oBAzDA,CA0DAG,oBA1DA,CA2DAC,sBA3DA,CA6DA,CAtFA,CA6FAkD,sCAEA,CA/FA,CAqGAC,+CACA,gBACA,CAvGA,CA6GAC,sDAEA,MADAC,sCACA,YACA,CAhHA,CALA,CA0HA,kCACA,CA/HA,C,CAiIA/I,MCtJA,wE","names":["define","helpers","data","buffer","escapeExpression","helper","stack1","loaded","Promise","moduleLoader","add","load","then","loadedModule","MathJax","postRender","window","$element","defaultValue","interaction","$addGapBtn","MathEntryInteractionStateQuestion","$prompt","containerEditor","change","mathInPrompt","markup","markupSelector","related","areaBroker","toBoolean","simpleEditor","$gapStyleBox","$gapStyleSelector","_widget","$form","response","serial","identifier","authorizeWhiteSpace","useGapExpression","focusOnDenominator","tool_frac","tool_sqrt","tool_exp","tool_log","tool_ln","tool_limit","tool_sum","tool_nthroot","tool_e","tool_infinity","squarebkts","tool_pi","tool_cos","tool_sin","tool_tan","tool_lte","tool_gte","tool_times","tool_divide","tool_plusminus","roundbkts","curlybkts","tool_angle","tool_minus","tool_plus","tool_equal","tool_lower","tool_greater","tool_subscript","tool_integral","tool_timesdot","tool_triangle","tool_similar","tool_paral","tool_perp","tool_inmem","tool_ninmem","tool_union","tool_intersec","tool_colon","tool_to","tool_congruent","tool_subset","tool_superset","tool_contains","tool_matrix_2row","tool_matrix_2row_2col","allowNewLine","enableAutoWrap","formElement","self","i","configChangeCallBack","gapStyle","width","minimumResultsForSearch","val","trigger","$container","$toolbar","Correct","hb","__","_","$","stateFactory","Map","answerFormTpl","addAnswerOptionBtn","MathEntryInteractionStateResponse","$responseForm","$addAnswerBtn","gapExpression","gapCount","newCorrectAnswer","mapEntries","$entryConfig","$editButtons","e","base","string","$deleteButtons","responseDeclaration","MathEntryInteractionWidget","Widget","$interaction","_typeIdentifier","mathEntryInteractionCreator","getTypeIdentifier","getWidget","getDefaultProperties","inResponseState","tool_lbrack","tool_rbrack","tool_lbrace","tool_rbrace","tool_lparen","tool_rparen","afterCreate","getMarkupTemplate","getMarkupData","defaultData"],"sources":["../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/propertiesForm!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/addGapBtn!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/helper/mathInPrompt.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/Question.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/Correct.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/answerForm!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/addAnswerOption!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/Map.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/states/states.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/widget/Widget.js","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/creator/tpl/markup!tpl","../../../qtiItemPci/views/js/pciCreator/ims/mathEntryInteraction/imsPciCreator.js","../build/config-wrap-end-default.js"],"sourcesContent":["\ndefine('tpl!mathEntryInteraction/creator/tpl/propertiesForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \"checked=\\\"checked\\\"\";\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"style=\\\"display:none\\\"\";\n  }\n\n  buffer += \"<div class=\\\"panel\\\">\\n    <label for=\\\"\\\" class=\\\"has-icon\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Response identifier\", options) : helperMissing.call(depth0, \"__\", \"Response identifier\", options)))\n    + \"</label>\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\n    <div class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options)))\n    + \"</div>\\n\\n    <input type=\\\"text\\\"\\n           name=\\\"identifier\\\"\\n           value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"\\n           placeholder=\\\"e.g. RESPONSE\\\"\\n           data-validate=\\\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=\";\n  if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\">\\n</div>\\n\\n<hr />\\n\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Options\", options) : helperMissing.call(depth0, \"__\", \"Options\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"authorizeWhiteSpace\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.authorizeWhiteSpace), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"authorize white space\", options) : helperMissing.call(depth0, \"__\", \"authorize white space\", options)))\n    + \"\\n    </label>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"useGapExpression\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.useGapExpression), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"use expression with gaps\", options) : helperMissing.call(depth0, \"__\", \"use expression with gaps\", options)))\n    + \"\\n    </label>\\n    <div class=\\\"panel mathgap-style-box\\\" \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.useGapExpression), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\\n        <label for=\\\"gapStyle\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Gap size\", options) : helperMissing.call(depth0, \"__\", \"Gap size\", options)))\n    + \"</label>\\n        <select name=\\\"gapStyle\\\" data-mathgap-style>\\n            <option value=\\\"math-gap-small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Small\", options) : helperMissing.call(depth0, \"__\", \"Small\", options)))\n    + \"</option>\\n            <option value=\\\"math-gap-medium\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Medium\", options) : helperMissing.call(depth0, \"__\", \"Medium\", options)))\n    + \"</option>\\n            <option value=\\\"math-gap-large\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Large\", options) : helperMissing.call(depth0, \"__\", \"Large\", options)))\n    + \"</option>\\n        </select>\\n    </div>\\n</div>\\n\\n<hr />\\n\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Functions\", options) : helperMissing.call(depth0, \"__\", \"Functions\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_sqrt\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_sqrt), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"1em\\\" width=\\\"1em\\\" viewBox=\\\"0 0 400 400\\\" version=\\\"1.0\\\">\\n            <path d=\\\"m193.39062 4.859375-50.8125 317.375-79.093743-160.71876-58.781256 29.46875l6.6250007 12.5 38.687495-17.75 96.875003 199.40625 58.6875-366.28124h144.71876v-14h-142.46876-10.21874-4.21876z\\\"></path>\\n            <text class=\\\"\\\">√</text>\\n        </svg>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"square root\", options) : helperMissing.call(depth0, \"__\", \"square root\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_frac\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_frac), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"fraction\", options) : helperMissing.call(depth0, \"__\", \"fraction\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_exp\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_exp), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        x&#8319; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"exponent\", options) : helperMissing.call(depth0, \"__\", \"exponent\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_subscript\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_subscript), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        x&#8336; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"subscript\", options) : helperMissing.call(depth0, \"__\", \"subscript\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_log\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_log), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"log\", options) : helperMissing.call(depth0, \"__\", \"log\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_ln\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_ln), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"ln\", options) : helperMissing.call(depth0, \"__\", \"ln\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_limit\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_limit), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"limit\", options) : helperMissing.call(depth0, \"__\", \"limit\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_sum\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_sum), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"sum\", options) : helperMissing.call(depth0, \"__\", \"sum\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_nthroot\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_nthroot), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"n-root\", options) : helperMissing.call(depth0, \"__\", \"n-root\", options)))\n    + \"\\n    </label>\\n</div>\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Symbols\", options) : helperMissing.call(depth0, \"__\", \"Symbols\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_e\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_e), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        e\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_infinity\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_infinity), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8734;\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"roundbkts\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.roundbkts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        ( ) \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"parentheses/round brackets\", options) : helperMissing.call(depth0, \"__\", \"parentheses/round brackets\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"curlybkts\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.curlybkts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        { } \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"braces/curly brackets\", options) : helperMissing.call(depth0, \"__\", \"braces/curly brackets\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"squarebkts\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.squarebkts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        [ ] \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"square brackets\", options) : helperMissing.call(depth0, \"__\", \"square brackets\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_integral\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_integral), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#x222b; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Indefinite integral\", options) : helperMissing.call(depth0, \"__\", \"Indefinite integral\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_colon\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_colon), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        : \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"colon\", options) : helperMissing.call(depth0, \"__\", \"colon\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_to\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_to), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#x2192; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"right arrow\", options) : helperMissing.call(depth0, \"__\", \"right arrow\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Geometry\", options) : helperMissing.call(depth0, \"__\", \"Geometry\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_angle\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_angle), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &ang; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"angle\", options) : helperMissing.call(depth0, \"__\", \"angle\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_integral\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_integral), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Indefinite integral\", options) : helperMissing.call(depth0, \"__\", \"Indefinite integral\", options)))\n    + \"\\n        </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_triangle\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_triangle), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#9651; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"triangle\", options) : helperMissing.call(depth0, \"__\", \"triangle\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_similar\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_similar), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &sim; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"similar\", options) : helperMissing.call(depth0, \"__\", \"similar\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_paral\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_paral), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8741; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is parallel with\", options) : helperMissing.call(depth0, \"__\", \"is parallel with\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_perp\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_perp), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#8869; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is perpendicular to\", options) : helperMissing.call(depth0, \"__\", \"is perpendicular to\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Trigonometry\", options) : helperMissing.call(depth0, \"__\", \"Trigonometry\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_pi\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_pi), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &pi;\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_cos\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_cos), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"cosinus\", options) : helperMissing.call(depth0, \"__\", \"cosinus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_sin\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_sin), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"sinus\", options) : helperMissing.call(depth0, \"__\", \"sinus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_tan\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_tan), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"tangent\", options) : helperMissing.call(depth0, \"__\", \"tangent\", options)))\n    + \"\\n    </label>\\n</div>\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Comparison\", options) : helperMissing.call(depth0, \"__\", \"Comparison\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_lower\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_lower), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &lt; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"lower than\", options) : helperMissing.call(depth0, \"__\", \"lower than\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_greater\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_greater), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &gt; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"greater than\", options) : helperMissing.call(depth0, \"__\", \"greater than\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_lte\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_lte), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"≤\", options) : helperMissing.call(depth0, \"__\", \"≤\", options)))\n    + \" \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"lower than or equal\", options) : helperMissing.call(depth0, \"__\", \"lower than or equal\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_gte\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_gte), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"≥\", options) : helperMissing.call(depth0, \"__\", \"≥\", options)))\n    + \" \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"greater than or equal\", options) : helperMissing.call(depth0, \"__\", \"greater than or equal\", options)))\n    + \"\\n    </label>\\n</div>\\n\\n<hr />\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Operands\", options) : helperMissing.call(depth0, \"__\", \"Operands\", options)))\n    + \"</h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_equal\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_equal), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        = \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"equal\", options) : helperMissing.call(depth0, \"__\", \"equal\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_plus\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_plus), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        + \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"plus\", options) : helperMissing.call(depth0, \"__\", \"plus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_minus\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_minus), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        – \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"minus\", options) : helperMissing.call(depth0, \"__\", \"minus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_times\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_times), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &times; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"times\", options) : helperMissing.call(depth0, \"__\", \"times\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_timesdot\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_timesdot), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        · \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"times dot\", options) : helperMissing.call(depth0, \"__\", \"times dot\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_divide\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_divide), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &divide; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"divide\", options) : helperMissing.call(depth0, \"__\", \"divide\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_plusminus\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_plusminus), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#177; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Plus/minus\", options) : helperMissing.call(depth0, \"__\", \"Plus/minus\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_inmem\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_inmem), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is a member of\", options) : helperMissing.call(depth0, \"__\", \"is a member of\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_ninmem\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_ninmem), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"is not a member of\", options) : helperMissing.call(depth0, \"__\", \"is not a member of\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_union\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_union), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"set union\", options) : helperMissing.call(depth0, \"__\", \"set union\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_intersec\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_intersec), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"set intersection\", options) : helperMissing.call(depth0, \"__\", \"set intersection\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_congruent\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_congruent), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#x2245; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"congruent\", options) : helperMissing.call(depth0, \"__\", \"congruent\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_subset\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_subset), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#x2282; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"subset\", options) : helperMissing.call(depth0, \"__\", \"subset\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_superset\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_superset), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#x2283; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"superset\", options) : helperMissing.call(depth0, \"__\", \"superset\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_contains\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_contains), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        &#x220B; \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"contains as member\", options) : helperMissing.call(depth0, \"__\", \"contains as member\", options)))\n    + \"\\n    </label>\\n</div>\\n<hr />\\n\\n<h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Matrix\", options) : helperMissing.call(depth0, \"__\", \"Matrix\", options)))\n    + \"</h3>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_matrix_2row\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_matrix_2row), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"2 rows\", options) : helperMissing.call(depth0, \"__\", \"2 rows\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"tool_matrix_2row_2col\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.tool_matrix_2row_2col), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"2 rows & 2 columns\", options) : helperMissing.call(depth0, \"__\", \"2 rows & 2 columns\", options)))\n    + \"\\n    </label>\\n</div>\\n<hr />\\n\\n<h3 class=\\\"txt-error\\\"><strong><span class=\\\"icon-warning\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Experimental only\", options) : helperMissing.call(depth0, \"__\", \"Experimental only\", options)))\n    + \"</strong></h3>\\n\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"allowNewLine\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.allowNewLine), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"allow line break\", options) : helperMissing.call(depth0, \"__\", \"allow line break\", options)))\n    + \"\\n    </label>\\n</div>\\n<div>\\n    <label class=\\\"panel\\\">\\n        <input name=\\\"enableAutoWrap\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.enableAutoWrap), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\n        <span class=\\\"icon-checkbox\\\"></span>\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"enable auto wrap\", options) : helperMissing.call(depth0, \"__\", \"enable auto wrap\", options)))\n    + \"\\n    </label>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/addGapBtn', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"add-option\\\">\\n    <span class=\\\"icon-add\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add gap\", options) : helperMissing.call(depth0, \"__\", \"Add gap\", options)))\n    + \"\\n</div>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2022 (original work) Open Assessment Technologies SA;\n */\ndefine('mathEntryInteraction/creator/helper/mathInPrompt',['core/moduleLoader'], function (moduleLoader) {\n    'use strict';\n\n    let MathJax;\n    let loaded = false;\n\n    /***\n     * lazy-load MathJax dependency\n     * @returns {Promise}\n     */\n    function load() {\n        if (loaded) {\n            return Promise.resolve();\n        }\n        return moduleLoader([], () => true)\n            .add({ module: 'mathJax', category: 'mathEntryInteraction' })\n            .load()\n            .then(loadedModule => {\n                loaded = true;\n                MathJax = loadedModule && loadedModule.length ? loadedModule[0] : void 0;\n\n                /**\n                 * Do not wait between rendering each individual math element\n                 * http://docs.mathjax.org/en/latest/api/hub.html\n                 * @see https://github.com/oat-sa/tao-item-runner-qti-fe/blob/master/src/qtiCommonRenderer/renderers/Math.js\n                 */\n                if (MathJax && MathJax.Hub) {\n                    MathJax.Hub.processSectionDelay = 0;\n                }\n            });\n    }\n\n    const mathInPrompt = {\n        /**\n         * On dom element containing `<math>...</math>` MathML markup,\n         * run MathJax renderer (\"typeset\" it)\n         * @param {Object} $element\n         * @returns {Promise}\n         */\n        postRender: function postRender($element) {\n            if ($element.find('math').length === 0) {\n                return Promise.resolve();\n            }\n            return load().then(() => {\n                if (MathJax && MathJax.Hub && typeof MathJax.Hub.Queue === 'function') {\n                    /**\n                     * MathJax needs to be exported globally to integrate with tools like TTS, it's weird...\n                     * @see https://github.com/oat-sa/tao-item-runner-qti-fe/blob/master/src/qtiCommonRenderer/renderers/Math.js\n                     */\n                    if (!window.MathJax) {\n                        window.MathJax = MathJax;\n                    }\n                    if ($element.length) {\n                        MathJax.Hub.Queue(['Typeset', MathJax.Hub, $element[0]]);\n                    }\n                }\n            });\n        }\n    };\n\n    return mathInPrompt;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2017 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/states/Question',[\n    'jquery',\n    'i18n',\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'taoQtiItem/qtiCreator/editor/simpleContentEditableElement',\n    'taoQtiItem/qtiCreator/editor/containerEditor',\n    'tpl!mathEntryInteraction/creator/tpl/propertiesForm',\n    'tpl!mathEntryInteraction/creator/tpl/addGapBtn',\n    'mathEntryInteraction/creator/helper/mathInPrompt'\n], function($, __, stateFactory, Question, formElement, simpleEditor, containerEditor, formTpl, addGapBtnTpl, mathInPrompt){\n    'use strict';\n\n    var $addGapBtn = $(addGapBtnTpl());\n\n    var MathEntryInteractionStateQuestion = stateFactory.extend(Question, function create(){\n        var $container = this.widget.$container,\n            $prompt = $container.find('.prompt'),\n            interaction = this.widget.element;\n\n        containerEditor.create($prompt, {\n            change : function(text){\n                interaction.data('prompt', text);\n                interaction.updateMarkup();\n\n                if (!$prompt.is('[data-html-editable-container=\"true\"]')) {\n                    mathInPrompt.postRender($prompt);\n                }\n            },\n            markup : interaction.markup,\n            markupSelector : '.prompt',\n            related : interaction,\n            areaBroker: this.widget.getAreaBroker()\n        });\n\n        if (toBoolean(interaction.prop('useGapExpression'), false)) {\n            this.createAddGapBtn();\n        }\n\n        this.addMathFieldListener();\n\n    }, function exit(){\n        var $container = this.widget.$container,\n            $prompt = $container.find('.prompt');\n\n        simpleEditor.destroy($container);\n        containerEditor.destroy($prompt);\n\n        this.removeAddGapBtn();\n    });\n\n    function toBoolean(value, defaultValue) {\n        if (typeof(value) === \"undefined\") {\n            return defaultValue;\n        } else {\n            return (value === true || value === \"true\");\n        }\n    }\n    /**\n     * Callback for configuration change\n     * @param {Object} interaction - the current interaction\n     * @param {String} value - new value of the changed property\n     * @param {String} name - changed property\n     */\n    function configChangeCallBack(interaction, value, name) {\n        interaction.prop(name, value);\n        interaction.triggerPci('configChange', [interaction.getProperties()]);\n    }\n\n    MathEntryInteractionStateQuestion.prototype.initForm = function initForm(){\n\n        var self = this,\n            _widget = this.widget,\n            $form = _widget.$form,\n            interaction = _widget.element,\n            response = interaction.getResponseDeclaration(),\n            $gapStyleBox,\n            $gapStyleSelector;\n\n        //render the form using the form template\n        $form.html(formTpl({\n            serial : response.serial,\n            identifier : interaction.attr('responseIdentifier'),\n\n            authorizeWhiteSpace: toBoolean(interaction.prop('authorizeWhiteSpace'), false),\n            useGapExpression: toBoolean(interaction.prop('useGapExpression'), false),\n            focusOnDenominator: toBoolean(interaction.prop('focusOnDenominator'), false),\n\n            tool_frac:      toBoolean(interaction.prop('tool_frac'),    true),\n            tool_sqrt:      toBoolean(interaction.prop('tool_sqrt'),    true),\n            tool_exp:       toBoolean(interaction.prop('tool_exp'),     true),\n            tool_log:       toBoolean(interaction.prop('tool_log'),     true),\n            tool_ln:        toBoolean(interaction.prop('tool_ln'),      true),\n            tool_limit:     toBoolean(interaction.prop('tool_limit'),   true),\n            tool_sum:       toBoolean(interaction.prop('tool_sum'),     true),\n            tool_nthroot:   toBoolean(interaction.prop('tool_nthroot'), true),\n            tool_e:         toBoolean(interaction.prop('tool_e'),       true),\n            tool_infinity:  toBoolean(interaction.prop('tool_infinity'),true),\n            squarebkts:     toBoolean(interaction.prop('tool_rbrack'),  true) && toBoolean(interaction.prop('tool_lbrack'), true),\n            tool_pi:        toBoolean(interaction.prop('tool_pi'),      true),\n            tool_cos:       toBoolean(interaction.prop('tool_cos'),     true),\n            tool_sin:       toBoolean(interaction.prop('tool_sin'),     true),\n            tool_tan:       toBoolean(interaction.prop('tan'),          true),\n            tool_lte:       toBoolean(interaction.prop('tool_lte'),     true),\n            tool_gte:       toBoolean(interaction.prop('tool_gte'),     true),\n            tool_times:     toBoolean(interaction.prop('tool_times'),   true),\n            tool_divide:    toBoolean(interaction.prop('tool_divide'),  true),\n            tool_plusminus: toBoolean(interaction.prop('tool_plusminus'),true),\n            roundbkts:      toBoolean(interaction.prop('tool_rparen'),  true) && toBoolean(interaction.prop('tool_lparen'), true),\n            curlybkts:      toBoolean(interaction.prop('tool_rbrace'),  true) && toBoolean(interaction.prop('tool_lbrace'), true),\n            tool_angle:     toBoolean(interaction.prop('tool_angle'),   true),\n            tool_minus:     toBoolean(interaction.prop('tool_minus'),   true),\n            tool_plus:      toBoolean(interaction.prop('tool_plus'),    true),\n            tool_equal:     toBoolean(interaction.prop('tool_equal'),   true),\n            tool_lower:     toBoolean(interaction.prop('tool_lower'),   true),\n            tool_greater:   toBoolean(interaction.prop('tool_greater'), true),\n            tool_subscript: toBoolean(interaction.prop('tool_subscript'),true),\n            tool_integral:  toBoolean(interaction.prop('tool_integral'),true),\n            tool_timesdot:  toBoolean(interaction.prop('tool_timesdot'),true),\n            tool_triangle:  toBoolean(interaction.prop('tool_triangle'),true),\n            tool_similar:   toBoolean(interaction.prop('tool_similar'), true),\n            tool_paral:     toBoolean(interaction.prop('tool_paral'),   true),\n            tool_perp:      toBoolean(interaction.prop('tool_perp'),    true),\n            tool_inmem:     toBoolean(interaction.prop('tool_inmem'),   true),\n            tool_ninmem:    toBoolean(interaction.prop('tool_ninmem'),  true),\n            tool_union:     toBoolean(interaction.prop('tool_union'),   true),\n            tool_intersec:  toBoolean(interaction.prop('tool_intersec'),true),\n            tool_colon:     toBoolean(interaction.prop('tool_colon'),   true),\n            tool_to:        toBoolean(interaction.prop('tool_to'),      true),\n            tool_congruent: toBoolean(interaction.prop('tool_congruent'),   true),\n            tool_subset: toBoolean(interaction.prop('tool_subset'),     true),\n            tool_superset: toBoolean(interaction.prop('tool_superset'), true),\n            tool_contains: toBoolean(interaction.prop('tool_contains'), true),\n            tool_matrix_2row:   toBoolean(interaction.prop('tool_matrix_2row'),        true),\n            tool_matrix_2row_2col:   toBoolean(interaction.prop('tool_matrix_2row_2col'),        true),\n            allowNewLine:   toBoolean(interaction.prop('allowNewLine'), false),\n            enableAutoWrap: toBoolean(interaction.prop('enableAutoWrap'), false)\n        }));\n\n        //init form javascript\n        formElement.initWidget($form);\n\n            //init data change callbacks\n            formElement.setChangeCallbacks($form, interaction, {\n                identifier: function(i, value){\n                response.id(value);\n                interaction.attr('responseIdentifier', value);\n            },\n            useGapExpression: function gapChangeCallback(i, value) {\n                if (toBoolean(value, false)) {\n                    self.createAddGapBtn();\n                    $gapStyleBox.show();\n                } else {\n                    i.prop('gapExpression', '');\n                    self.removeAddGapBtn();\n                    $gapStyleBox.hide();\n                }\n\n                response.attr('cardinality', 'single');\n                configChangeCallBack(i, value, 'useGapExpression');\n            },\n            gapStyle: function gapStyleChangeCallback(i, newStyle) {\n\n                i.prop('gapStyle', newStyle);\n\n                configChangeCallBack(i, newStyle, 'gapStyle');\n            },\n            authorizeWhiteSpace: configChangeCallBack,\n            focusOnDenominator: configChangeCallBack,\n\n            tool_frac:      configChangeCallBack,\n            tool_sqrt:      configChangeCallBack,\n            tool_exp:       configChangeCallBack,\n            tool_log:       configChangeCallBack,\n            tool_ln:        configChangeCallBack,\n            tool_limit:     configChangeCallBack,\n            tool_sum:       configChangeCallBack,\n            tool_nthroot:   configChangeCallBack,\n            tool_e:         configChangeCallBack,\n            tool_infinity:  configChangeCallBack,\n            tool_pi:        configChangeCallBack,\n            tool_cos:       configChangeCallBack,\n            tool_sin:       configChangeCallBack,\n            tool_tan:       configChangeCallBack,\n            tool_lte:       configChangeCallBack,\n            tool_gte:       configChangeCallBack,\n            tool_times:     configChangeCallBack,\n            tool_divide:    configChangeCallBack,\n            tool_plusminus: configChangeCallBack,\n            tool_angle:     configChangeCallBack,\n            tool_minus:     configChangeCallBack,\n            tool_plus:      configChangeCallBack,\n            tool_equal:     configChangeCallBack,\n            tool_lower:     configChangeCallBack,\n            tool_greater:   configChangeCallBack,\n            tool_subscript: configChangeCallBack,\n            tool_integral:  configChangeCallBack,\n            tool_timesdot:  configChangeCallBack,\n            tool_triangle:  configChangeCallBack,\n            tool_similar:   configChangeCallBack,\n            tool_paral:     configChangeCallBack,\n            tool_perp:      configChangeCallBack,\n            tool_inmem:     configChangeCallBack,\n            tool_ninmem:    configChangeCallBack,\n            tool_union:     configChangeCallBack,\n            tool_intersec:  configChangeCallBack,\n            tool_colon:     configChangeCallBack,\n            tool_to:     configChangeCallBack,\n            tool_congruent: configChangeCallBack,\n            tool_subset:    configChangeCallBack,\n            tool_superset:    configChangeCallBack,\n            tool_contains:    configChangeCallBack,\n            tool_matrix_2row:    configChangeCallBack,\n            tool_matrix_2row_2col:    configChangeCallBack,\n\n            squarebkts: function squarebktsChangeCallBack(i, value) {\n                i.prop('tool_lbrack', value);\n                i.prop('tool_rbrack', value);\n                i.triggerPci('configChange', [i.getProperties()]);\n            },\n            roundbkts: function roundbktsChangeCallBack(i, value) {\n                i.prop('tool_lparen', value);\n                i.prop('tool_rparen', value);\n                i.triggerPci('configChange', [i.getProperties()]);\n            },\n            curlybkts: function curlybktsChangeCallBack(i, value) {\n                i.prop('tool_lbrace', value);\n                i.prop('tool_rbrace', value);\n                i.triggerPci('configChange', [i.getProperties()]);\n            },\n\n            allowNewLine: configChangeCallBack,\n            enableAutoWrap: configChangeCallBack\n        });\n\n\n        $gapStyleBox = $form.find('.mathgap-style-box');\n        $gapStyleSelector = $gapStyleBox.find('[data-mathgap-style]');\n\n        $gapStyleSelector.select2({\n            width: '100%',\n            minimumResultsForSearch: Infinity\n        })\n        .val(interaction.prop('gapStyle'))\n        .trigger('change');\n    };\n\n    /**\n     * Change callback for editable math field\n     */\n\n    MathEntryInteractionStateQuestion.prototype.addMathFieldListener = function addMathFieldListener() {\n        var _widget = this.widget,\n            interaction = _widget.element;\n\n        interaction.onPci('responseChange', function(latex) {\n            if (toBoolean(interaction.prop('useGapExpression'), false)) {\n                interaction.prop('gapExpression', latex);\n            } else {\n                interaction.prop('gapExpression', '');\n            }\n        });\n    };\n\n    /**\n     * Display the \"Add Gap\" button\n     */\n    MathEntryInteractionStateQuestion.prototype.createAddGapBtn = function createAddGapBtn() {\n        var _widget = this.widget,\n            $container = _widget.$container,\n            $toolbar = $container.find('.toolbar'),\n            interaction =_widget.element;\n\n        if ($toolbar.length) {\n            $toolbar.after($addGapBtn);\n            $addGapBtn.on('click', function() {\n                interaction.getResponseDeclaration().removeMapEntries();\n                interaction.triggerPci('addGap');\n            });\n        }\n    };\n\n    /**\n     * Remove the \"Add Gap\" button from the DOM\n     */\n    MathEntryInteractionStateQuestion.prototype.removeAddGapBtn = function removeAddGapBtn() {\n        $addGapBtn.off('click');\n        $addGapBtn.remove();\n    };\n\n    return MathEntryInteractionStateQuestion;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2021 (original work) Open Assessment Technologies SA;\n */\ndefine('mathEntryInteraction/creator/widget/states/Correct',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/states/Correct'\n], function (stateFactory, Correct) {\n    'use strict';\n\n    var InteractionStateCorrect = stateFactory.create(\n        Correct,\n        function init() {\n            this.widget.element.getResponseDeclaration().setTemplate('MAP_RESPONSE');\n            this.widget.changeState('map');\n        },\n        function exit() {\n        }\n    );\n\n    return InteractionStateCorrect;\n});\n\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/answerForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n                <div class=\\\"correct-answer-entry\\\" data-index=\\\"\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"\\\">\\n                    <p>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Correct answer option\", options) : helperMissing.call(depth0, \"__\", \"Correct answer option\", options)))\n    + \" \"\n    + escapeExpression((helper = helpers.increaseIndex || (depth0 && depth0.increaseIndex),options={hash:{},data:data},helper ? helper.call(depth0, (data == null || data === false ? data : data.index), options) : helperMissing.call(depth0, \"increaseIndex\", (data == null || data === false ? data : data.index), options)))\n    + \"</p>\\n                    <a href=\\\"#\\\" class=\\\"answer-edit\\\">\\n                        <span class=\\\"icon-edit\\\"></span>\\n                        <span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"edit the answer\", options) : helperMissing.call(depth0, \"__\", \"edit the answer\", options)))\n    + \"</span>\\n                    </a>\\n\\n                    <br>\\n\\n                    <a href=\\\"#\\\" class=\\\"answer-delete\\\">\\n                        <span class=\\\"icon-bin\\\"></span>\\n                        <span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"delete the answer\", options) : helperMissing.call(depth0, \"__\", \"delete the answer\", options)))\n    + \"</span>\\n                    </a>\\n                </div>\\n                <br>\\n                \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"panel mathEntryInteraction\\\">\\n    <hr>\\n    <h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Define correct responses\", options) : helperMissing.call(depth0, \"__\", \"Define correct responses\", options)))\n    + \":</h3>\\n    <div class=\\\"answer-entries-config\\\" data-config-for-hot-uid=\\\"\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.key)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"\\\">\\n        <div class=\\\"panel\\\">\\n            <div class=\\\"entry-config\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.correctAnswerEntries), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/addAnswerOption', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<button class=\\\"add-answer-option btn-info\\\">\\n    <i class=\\\"adder\\\"> </i> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add answer option\", options) : helperMissing.call(depth0, \"__\", \"Add answer option\", options)))\n    + \"\\n</button>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2021 (original work) Open Assessment Technologies SA;\n */\ndefine('mathEntryInteraction/creator/widget/states/Map',[\n    'handlebars',\n    'i18n',\n    'lodash',\n    'jquery',\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/states/Map',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n    'tpl!mathEntryInteraction/creator/tpl/answerForm',\n    'tpl!mathEntryInteraction/creator/tpl/addAnswerOption',\n], function (\n    hb,\n    __,\n    _,\n    $,\n    stateFactory,\n    Map,\n    formElement,\n    answerFormTpl,\n    addAnswerOptionBtn\n) {\n    'use strict';\n    var CORRECT_ANSWER_VALUE = 1;\n    hb.registerHelper('increaseIndex', function (value, options) {\n        return parseInt(value) + 1;\n    });\n\n    var MathEntryInteractionStateResponse = stateFactory.create(\n        Map,\n        function init() {\n            this.initGlobalVariables();\n            this.initForm();\n        },\n        function exit() {\n            this.emptyGapFields();\n            this.toggleResponseMode(false);\n            this.saveAnswers();\n            this.removeResponseChangeEventListener();\n            this.removeEditDeleteListeners();\n            this.removeAddButtonListener();\n            this.destroyForm();\n        }\n    );\n\n\n    MathEntryInteractionStateResponse.prototype.initGlobalVariables = function initGlobalVariables() {\n        var self = this,\n            interaction = self.widget.element;\n        self.activeEditId = null;\n        self.correctResponses = [];\n\n        if (this.inGapMode(self) === true) {\n            interaction = self.widget.element;\n            self.gapTemplate = interaction.prop('gapExpression');\n        }\n    }\n\n    MathEntryInteractionStateResponse.prototype.initForm = function initForm() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm;\n\n        this.initResponseChangeEventListener();\n        self.correctResponses = this.getExistingCorrectAnswerOptions();\n        $responseForm.html(addAnswerOptionBtn());\n        this.initAddAnswerButton();\n        this.renderForm(self.correctResponses);\n    }\n\n    MathEntryInteractionStateResponse.prototype.initAddAnswerButton = function initAddAnswerButton() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm,\n            $addAnswerBtn = $responseForm.find($('.add-answer-option'));\n\n        $addAnswerBtn.on('click', function () {\n            var newCorrectAnswer;\n\n            if (self.inGapMode() === true) {\n                self.emptyGapFields();\n                var gapExpression = interaction.prop('gapExpression');\n                var gapCount = (gapExpression.match(/\\\\taoGap/g) || []).length;\n                if (gapCount > 0) {\n                    newCorrectAnswer = [];\n                    for (var i = 0; i < gapCount; i++) {\n                        newCorrectAnswer.push(' ');\n                    }\n\n                    newCorrectAnswer = newCorrectAnswer.join(',');\n                } else {\n                    newCorrectAnswer = '';\n                }\n            } else {\n                newCorrectAnswer = '';\n                self.toggleResponseMode(false);\n            }\n\n            self.correctResponses.push(newCorrectAnswer);\n            self.renderForm(self.correctResponses);\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.getExistingCorrectAnswerOptions = function getExistingCorrectAnswerOptions() {\n        var self = this,\n            interaction = self.widget.element;\n\n        var mapEntries = interaction.getResponseDeclaration().getMapEntries();\n        return _.keys(mapEntries) || [];\n    }\n\n    MathEntryInteractionStateResponse.prototype.initResponseChangeEventListener = function initResponseChangeEventListener() {\n        var self = this,\n            interaction = self.widget.element;\n\n        interaction.onPci('responseChange', function (latex) {\n            if (self.inGapMode(self) === false && self.activeEditId !== null) {\n                self.correctResponses[self.activeEditId] = latex;\n            } else if (self.inGapMode(self) === true && self.activeEditId !== null) {\n                var response = interaction.getResponse();\n                if (response !== null) {\n                    self.correctResponses[self.activeEditId] = response.base.string;\n                }\n            }\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.removeResponseChangeEventListener = function removeResponseChangeEventListener() {\n        var self = this,\n            interaction = self.widget.element;\n\n        interaction.offPci('responseChange');\n    }\n\n    MathEntryInteractionStateResponse.prototype.initEditingOptions = function initEditingOptions() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm,\n            $entryConfig = $responseForm.find('.entry-config'),\n            $editButtons = $entryConfig.find('.answer-edit');\n\n        $editButtons.click(function (e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            self.toggleResponseMode(true);\n            var selectedEditId = parseInt($(e.target).closest('div').attr('data-index'));\n\n            if (self.activeEditId !== selectedEditId) {\n\n                if (self.inGapMode() === true) {\n                    self.activeEditId = selectedEditId;\n                    var response = self.getGapResponseObject(self.correctResponses[self.activeEditId]);\n                    interaction.triggerPci('latexGapInput', [response]);\n                } else {\n                    self.activeEditId = selectedEditId;\n                    interaction.triggerPci('latexInput', [self.correctResponses[self.activeEditId]]);\n                }\n            } else {\n                self.emptyGapFields();\n            }\n        });\n    }\n\n    // forming gap response object to be further processed by the latexGapInput event\n    MathEntryInteractionStateResponse.prototype.getGapResponseObject = function getGapResponseObject(response) {\n        return {\n            base: {\n                string: response.split(',')\n            }\n        }\n    }\n\n    // removing all saved map entries\n    MathEntryInteractionStateResponse.prototype.clearMapEntries = function clearMapEntries() {\n        var self = this,\n            interaction = self.widget.element,\n            response = interaction.getResponseDeclaration(),\n            mapEntries = response.getMapEntries();\n\n        _.keys(mapEntries).forEach(function (mapKey) {\n            response.removeMapEntry(mapKey, true);\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.initDeletingOptions = function initDeletingOptions() {\n        var self = this,\n            interaction = self.widget.element,\n            $responseForm = self.widget.$responseForm,\n            $entryConfig = $responseForm.find('.entry-config'),\n            $deleteButtons = $entryConfig.find('.answer-delete');\n\n        $deleteButtons.click(function (e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            var id = parseInt($(e.target).closest('div').attr('data-index'));\n\n            if (self.inGapMode() === true) {\n                self.activeEditId = id;\n                self.emptyGapFields();\n            } else {\n                self.activeEditId = null;\n                self.toggleResponseMode(false);\n            }\n\n            self.correctResponses.splice(id, 1);\n            self.renderForm(self.correctResponses);\n        });\n    }\n\n    MathEntryInteractionStateResponse.prototype.renderForm = function renderForm(correctAnswerOptions) {\n        var self = this,\n            $responseForm = self.widget.$responseForm;\n\n        this.removeEditDeleteListeners();\n        $responseForm.find('.mathEntryInteraction').remove();\n        $responseForm.append(answerFormTpl({correctAnswerEntries: correctAnswerOptions}));\n        this.initDeletingOptions();\n        this.initEditingOptions();\n    }\n\n    /**\n     *   remove all event listeners to avoid any potential memory leaks\n     */\n    MathEntryInteractionStateResponse.prototype.removeEditDeleteListeners = function removeEditDeleteListeners() {\n        var self = this,\n            $entryConfig = self.widget.$responseForm.find('.entry-config');\n\n        $entryConfig.find('.answer-edit').off('click');\n        $entryConfig.find('.answer-delete').off('click');\n    }\n\n    MathEntryInteractionStateResponse.prototype.removeAddButtonListener = function removeAddButtonListener() {\n        var self = this,\n            $responseForm = self.widget.$responseForm;\n\n        $responseForm.find($('.add-answer-option')).off('click');\n    }\n\n    MathEntryInteractionStateResponse.prototype.destroyForm = function destroyForm() {\n        var self = this,\n            $responseForm = self.widget.$responseForm;\n\n        $responseForm.find('.mathEntryInteraction').remove();\n    }\n\n    MathEntryInteractionStateResponse.prototype.saveAnswers = function saveAnswers() {\n        var self = this,\n            interaction = self.widget.element,\n            responseDeclaration = interaction.getResponseDeclaration();\n\n        this.clearMapEntries();\n\n        if (this.inGapMode() === true) {\n            self.correctResponses = self.correctResponses.filter(function (response) {\n                return response.split(',').indexOf('') === -1;\n            });\n        }\n\n        self.correctResponses.forEach(function (response) {\n            responseDeclaration.setMapEntry(response, CORRECT_ANSWER_VALUE, false);\n        });\n    }\n\n    /**\n     *   if in gap mode: will empty all the gap fields\n     */\n    MathEntryInteractionStateResponse.prototype.emptyGapFields = function emptyGapFields() {\n        var self = this,\n            interaction = self.widget.element;\n\n        if (this.inGapMode() === true) {\n            self.activeEditId = null;\n\n            interaction.prop('gapExpression', self.gapTemplate);\n            this.toggleResponseMode(false);\n        }\n    }\n\n    MathEntryInteractionStateResponse.prototype.toggleResponseMode = function toggleResponseMode(value) {\n        var self = this,\n            interaction = self.widget.element;\n\n        if (interaction.prop('inResponseState') !== value) {\n            interaction.prop('inResponseState', value);\n            interaction.triggerPci('configChange', [interaction.getProperties()]);\n        }\n    }\n\n    MathEntryInteractionStateResponse.prototype.inGapMode = function inGapMode() {\n        var interaction = this.widget.element;\n        var useGapExpression = interaction.prop('useGapExpression');\n        return useGapExpression && useGapExpression !== 'false' || false;\n    }\n\n    return MathEntryInteractionStateResponse;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'mathEntryInteraction/creator/widget/states/Question',\n    'mathEntryInteraction/creator/widget/states/Correct',\n    'mathEntryInteraction/creator/widget/states/Map'\n], function(factory, states){\n    'use strict';\n\n    return factory.createBundle(states, arguments);\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\ndefine('mathEntryInteraction/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'mathEntryInteraction/creator/widget/states/states'\n], function(Widget, states){\n    'use strict';\n\n    var MathEntryInteractionWidget = Widget.clone();\n\n    MathEntryInteractionWidget.initCreator = function initCreator() {\n        var $interaction;\n\n        this.registerStates(states);\n\n        Widget.initCreator.call(this);\n\n        $interaction = this.$container.find('.mathEntryInteraction');\n        if ($interaction.length) {\n            $interaction.addClass('tao-qti-creator-context');\n        }\n    };\n\n    return MathEntryInteractionWidget;\n});\n","\ndefine('tpl!mathEntryInteraction/creator/tpl/markup', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"mathEntryInteraction\\\">\\n    <div class=\\\"prompt\\\">\";\n  if (helper = helpers.prompt) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.prompt); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n    <div class=\\\"math-entry\\\">\\n        <div class=\\\"toolbar\\\"></div>\\n        <div>\\n            <span class=\\\"math-entry-input\\\"></span>\\n        </div>\\n    </div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2021 (original work) Open Assessment Technologies SA;\n *\n * @author Christophe Noël <christophe@taotesting.com>\n *\n */\n\ndefine('mathEntryInteraction/imsPciCreator',[\n    'lodash',\n    'mathEntryInteraction/creator/widget/Widget',\n    'tpl!mathEntryInteraction/creator/tpl/markup'\n], function (_, Widget, markupTpl) {\n    'use strict';\n\n    var _typeIdentifier = 'mathEntryInteraction';\n\n    var mathEntryInteractionCreator = {\n        /**\n         * (required) Get the typeIdentifier of the custom interaction\n         *\n         * @returns {String}\n         */\n        getTypeIdentifier: function getTypeIdentifier() {\n            return _typeIdentifier;\n        },\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         *\n         * @returns {Object} Widget\n         */\n        getWidget: function getWidget() {\n            return Widget;\n        },\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        getDefaultProperties: function getDefaultProperties() {\n            return {\n                authorizeWhiteSpace: 'false',\n                useGapExpression: 'false',\n                inResponseState: 'false',\n                gapExpression: '',\n                gapStyle: '',\n                focusOnDenominator: false,\n\n                tool_frac: 'true',\n                tool_sqrt: 'true',\n                tool_exp: 'true',\n                tool_log: 'true',\n                tool_ln: 'true',\n                tool_limit: 'true',\n                tool_sum: 'true',\n                tool_nthroot: 'true',\n                tool_matrix_2row: 'true',\n                tool_matrix_2row_2col: 'true',\n                tool_e: 'true',\n                tool_infinity: 'true',\n                tool_lbrack: 'true',\n                tool_rbrack: 'true',\n                tool_pi: 'true',\n                tool_cos: 'true',\n                tool_sin: 'true',\n                tool_tan: 'true',\n                tool_lte: 'true',\n                tool_gte: 'true',\n                tool_times: 'true',\n                tool_divide: 'true',\n                tool_plusminus: 'true',\n                tool_angle: 'true',\n                tool_minus: 'true',\n                tool_plus: 'true',\n                tool_equal: 'true',\n                tool_lower: 'true',\n                tool_greater: 'true',\n                tool_subscript: 'true',\n                tool_lbrace: 'true',\n                tool_rbrace: 'true',\n                tool_lparen: 'true',\n                tool_rparen: 'true',\n                tool_integral: 'true',\n                tool_timesdot: 'true',\n                tool_triangle: 'true',\n                tool_similar: 'true',\n                tool_paral: 'true',\n                tool_perp: 'true',\n                tool_inmem: 'true',\n                tool_ninmem: 'true',\n                tool_union: 'true',\n                tool_intersec: 'true',\n                tool_colon: 'true',\n                tool_to: 'true',\n                tool_congruent: 'true',\n                tool_subset: 'true',\n                tool_superset: 'true',\n                tool_contains: 'true',\n                allowNewLine: 'false',\n                enableAutoWrap: 'false'\n            };\n        },\n        /**\n         * (optional) Callback to execute on the\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        afterCreate: function afterCreate(pci) {\n            //do some stuff\n        },\n        /**\n         * (required) Gives the qti pci xml template\n         *\n         * @returns {function} handlebar template\n         */\n        getMarkupTemplate: function getMarkupTemplate() {\n            return markupTpl;\n        },\n        /**\n         * (optional) Allows passing additional data to xml template\n         *\n         * @returns {function} handlebar template\n         */\n        getMarkupData: function getMarkupData(pci, defaultData) {\n            defaultData.prompt = pci.data('prompt');\n            return defaultData;\n        }\n    };\n\n    //since we assume we are in a tao context, there is no use to expose the a global object for lib registration\n    //all libs should be declared here\n    return mathEntryInteractionCreator;\n});\n\n","define(['mathEntryInteraction/imsPciCreator'],function(IMSPCI){return IMSPCI});\n"]}