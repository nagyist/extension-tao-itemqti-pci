{"version":3,"mappings":"AACAA,6FACA,sCAKA,aAGA,4BAGA,aAGA,+BAGA,aAGA,+BAnBAC,iCACAC,iCACA,gEAoJA,OAhIAC,0FACAC,mHACA,+KACAA,utBACA,4IACAC,8CACAA,oBA1BA,kBA0BAA,iCACAF,QACA,wIACAE,0CACAA,gBA9BA,kBA8BAA,iCACAF,QACA,0HACAG,uFACAA,kBACAH,0DACAC,yGACA,8LACAA,uNACA,gIACAE,mFACAA,kBACAH,0DACAC,qHACA,8LACAA,+OACA,oEACAE,uFACAA,kBACAH,+FACAC,qFACA,kFACAC,gDACAA,sBArDA,kBAqDAA,iCACAF,QACA,qIACAC,qFACA,kFACAC,gDACAA,sBA3DA,kBA2DAA,iCACAF,QACA,0MACAG,sFACAA,kBACAH,0DACAC,2HACA,8LACAA,+WACA,8GACAA,uGACA,0EACAC,8CACAA,oBAxEA,kBAwEAA,iCACAF,QACA,qPACAC,icACA,qHACAA,mGACA,uFACAC,oDACAA,0BAhFA,kBAgFAA,iCACAF,QACA,sEACAE,6DACAA,mCApFA,kBAoFAA,iCACAF,QACA,iMACAC,mUACA,wGACAA,6GACA,sLACAA,+WACA,+GACAE,sFACAA,kBACAH,OACAC,iGACA,+CACAE,0FACAA,kBACAH,OACAC,qGACA,oFACAE,0FACAA,kBACAH,+FACAC,yGACA,kFACAC,gDACAA,sBA7GA,kBA6GAA,iCACAF,QACA,uQACAC,yYACA,8FACAE,sFACAA,kBACAH,yEACAC,6FACA,kMACAA,mQACA,oHACAE,sFACAA,kBACAH,OACAC,qFACA,kDACAE,kFACAA,kBACAH,OACAC,yFACA,oJACAA,yGACA,+HACAE,6FACAA,kBACAH,qEACAC,yGACA,8LACAA,6fACA,0HACAA,6GACA,iGACAC,yDACAA,+BA/IA,kBA+IAA,iCACAF,QACA,qQACAC,2NACA,gCCvIAJ,mEACA,SACA,OACA,SACA,SACA,+CACA,6DACA,oDACA,wEACA,4DACA,2DACA,mBACA,SACAO,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,YAkBA,mBACAC,YACAA,iDAlBA,eACAN,EACA,aACA,WACA,4BAEAG,eAuHA,OAxGAI,iCACA,GAIAC,GACAC,EACAC,EANAC,cACAC,UACAN,YACAO,6BAKAC,MAGAF,QACAR,EACAT,0BACAoB,gBACAC,wCAEAC,sDACAC,8CACAC,oDAEAC,oCACAC,oCAEAC,gCACAC,4CAEAC,oDACAC,oCACAC,4CAEAC,0EACAC,uEAEAC,sEAKArB,8CACAC,gDAEAC,yCAGAT,gBAGAA,qBACAW,EACAN,EACAX,UAEAqB,yBACAH,QACAP,gCAGAW,gBAEAC,0BACAY,EACApB,SAEAA,SAEAqB,UAEAZ,eAEAC,eACAC,eAEAC,aACAC,mBAEAC,6BACA,YACAf,SACAD,WAEAC,SACAD,UAEAuB,UAEAN,eACAC,WAEAE,sCACAE,oBACAC,UAGAF,uBAEAf,yBAIAA,UAGAP,ICxJAnB,iEACA,+CACA,6EACA,4DACA,cACA,YAEA,iECvBAA,8FCgBAA,0DACA,sEACA,yDACA,uEACA,cACA,YAEA,gBAeA,OAbA4C,0BACA,KAEA3C,wBAEA4C,yBAEAC,qDACAA,UACAA,uCAIAF,ICtCA5C,qFACA,sCAMA,MALAC,kCACAC,kCAIA,uYCSAF,kDACA,SACA,yDACA,kDACA,oDACA,kBACA,YAEA,IAEA+C,IAMAC,6BACA,MATA,6BAiBAC,qBACA,KAaA,OAZAJ,iCACAK,kBApBA,8BAoBAA,mBAEAC,2BACA5C,8BACA,uBACA,yEACA2C,wBAKAL,GAQAO,gCACA,OACAC,gBACAxB,iBACAC,aACAC,gBAEAC,eACAC,eAEAC,aACAC,qBAEAC,gBACAC,iBACAC,YAEAgB,OACAC,aACAC,gBACAC,YAGAhB,uBACAF,2BACAC,4BASAkB,yBAQAC,6BACA,UASAC,4BACA,UAMA,YC1HA,iMACA,gZACA5D","names":["define","this","helpers","buffer","escapeExpression","helper","stack1","_","__","$","module","stateFactory","Question","formElement","pciMediaManagerFactory","simpleEditor","formTpl","typeCaster","interaction","AudioRecordingInteractionStateQuestion","$compressedOptions","$uncompressedOptions","$delayOptions","_widget","$form","response","pciMediaManager","serial","identifier","allowPlayback","autoStart","autoPlayback","delayMinutes","delaySeconds","maxRecords","maxRecordingTime","isCompressed","audioBitrate","isStereo","updateResponsePartially","partialUpdateInterval","displayDownloadLink","value","configChangeCallBack","AudioRecordingInteractionWidget","Widget","$interaction","audioRecordingInteractionCreator","getTypeIdentifier","getWidget","pci","defaultProperties","getDefaultProperties","isReviewMode","media","autostart","replayTimeout","maxPlays","afterCreate","getMarkupTemplate","getMarkupData"],"sources":["../../../qtiItemPci/views/js/pciCreator/ims/audioRecordingInteraction/creator/tpl/propertiesForm!tpl","../../../qtiItemPci/views/js/pciCreator/ims/audioRecordingInteraction/creator/widget/states/Question.js","../../../qtiItemPci/views/js/pciCreator/ims/audioRecordingInteraction/creator/widget/states/states.js","../../../qtiItemPci/views/js/pciCreator/ims/audioRecordingInteraction/creator/css/audioRecordingInteraction!css","../../../qtiItemPci/views/js/pciCreator/ims/audioRecordingInteraction/creator/widget/Widget.js","../../../qtiItemPci/views/js/pciCreator/ims/audioRecordingInteraction/creator/tpl/markup!tpl","../../../qtiItemPci/views/js/pciCreator/ims/audioRecordingInteraction/imsPciCreator.js","../../../../../../onLayerEnd0.js"],"sourcesContent":["\ndefine('tpl!audioRecordingInteraction/creator/tpl/propertiesForm', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \"checked=\\\"checked\\\"\";\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"style=\\\"display:none\\\"\";\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \" selected=\\\"selected\\\"\";\n  }\n\n  buffer += \"<div class=\\\"panel\\\">\\r\\n    <label for=\\\"response-identifier\\\" class=\\\"has-icon\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Response identifier\", options) : helperMissing.call(depth0, \"__\", \"Response identifier\", options)))\n    + \"</label>\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content:first\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <div class=\\\"tooltip-content\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the choice. This identifier must not be used by any other response or item variable. An identifier is a string of characters that must start with a Letter or an underscore (\\\"_\\\") and contain only Letters, underscores, hyphens (\\\"-\\\"), period (\\\".\\\", a.k.a. full-stop), Digits, CombiningChars and Extenders.\", options)))\n    + \"</div>\\r\\n\\r\\n    <input id=\\\"response-identifier\\\"\\r\\n           type=\\\"text\\\"\\r\\n           name=\\\"identifier\\\"\\r\\n           value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"\\r\\n           placeholder=\\\"e.g. RESPONSE\\\"\\r\\n           data-validate=\\\"$notEmpty; $qtiIdentifier; $availableIdentifier(serial=\";\n  if (helper = helpers.serial) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.serial); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\">\\r\\n</div>\\r\\n\\r\\n<div class=\\\"panel\\\">\\r\\n    <label>\\r\\n        <input name=\\\"allowPlayback\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.allowPlayback), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\r\\n        <span class=\\\"icon-checkbox\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow playback\", options) : helperMissing.call(depth0, \"__\", \"Allow playback\", options)))\n    + \"\\r\\n    </label>\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Give the possibility to the test taker to playback its own recording.\", options) : helperMissing.call(depth0, \"__\", \"Give the possibility to the test taker to playback its own recording.\", options)))\n    + \"\\r\\n    </span>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"panel\\\">\\r\\n    <label>\\r\\n        <input name=\\\"autoStart\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.autoStart), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\r\\n        <span class=\\\"icon-checkbox\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Auto start recording\", options) : helperMissing.call(depth0, \"__\", \"Auto start recording\", options)))\n    + \"\\r\\n    </label>\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Recording starts automatically once test taker give microphone use authorisation.\", options) : helperMissing.call(depth0, \"__\", \"Recording starts automatically once test taker give microphone use authorisation.\", options)))\n    + \"\\r\\n    </span>\\r\\n</div>\\r\\n\\r\\n<div data-role=\\\"delayOptions\\\" \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.autoStart), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\\r\\n    <div class=\\\"panel\\\">\\r\\n        <label for=\\\"delay-minutes\\\" class=\\\"spinner\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Min:\", options) : helperMissing.call(depth0, \"__\", \"Min:\", options)))\n    + \"</label>\\r\\n        <input id=\\\"delay-minutes\\\" name=\\\"delayMinutes\\\" value=\\\"\";\n  if (helper = helpers.delayMinutes) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.delayMinutes); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" data-max=\\\"20\\\" type=\\\"text\\\" />\\r\\n        <label for=\\\"delay-seconds\\\" class=\\\"spinner\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Sec:\", options) : helperMissing.call(depth0, \"__\", \"Sec:\", options)))\n    + \"</label>\\r\\n        <input id=\\\"delay-seconds\\\" name=\\\"delaySeconds\\\" value=\\\"\";\n  if (helper = helpers.delaySeconds) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.delaySeconds); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-increment=\\\"15\\\" data-min=\\\"0\\\" data-max=\\\"45\\\" type=\\\"text\\\" />\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"panel\\\">\\r\\n    <label>\\r\\n        <input name=\\\"autoPlayback\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.autoPlayback), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\r\\n        <span class=\\\"icon-checkbox\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Auto playback recording\", options) : helperMissing.call(depth0, \"__\", \"Auto playback recording\", options)))\n    + \"\\r\\n    </label>\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Recorded audio is automatically played back after recording stops. During playback, no user interaction is possible and all buttons are disabled.\", options) : helperMissing.call(depth0, \"__\", \"Recorded audio is automatically played back after recording stops. During playback, no user interaction is possible and all buttons are disabled.\", options)))\n    + \"\\r\\n    </span>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"panel\\\">\\r\\n    <label for=\\\"max-records\\\" class=\\\"spinner\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max attempts:\", options) : helperMissing.call(depth0, \"__\", \"Max attempts:\", options)))\n    + \"</label>\\r\\n    <input id=\\\"max-records\\\" name=\\\"maxRecords\\\" value=\\\"\";\n  if (helper = helpers.maxRecords) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.maxRecords); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"large\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" type=\\\"text\\\" />\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum number of recording attempts allowed to the test taker. Set to 0 to allow unlimited attempts. With a limit of 3, the test taker will be able to click 2 times on the reset button.\", options) : helperMissing.call(depth0, \"__\", \"Maximum number of recording attempts allowed to the test taker. Set to 0 to allow unlimited attempts. With a limit of 3, the test taker will be able to click 2 times on the reset button.\", options)))\n    + \"\\r\\n    </span>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"panel\\\">\\r\\n    <label for=\\\"max-recording-time\\\" class=\\\"spinner\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time limit:\", options) : helperMissing.call(depth0, \"__\", \"Time limit:\", options)))\n    + \"</label>\\r\\n    <input id=\\\"max-recording-time\\\" name=\\\"maxRecordingTime\\\" value=\\\"\";\n  if (helper = helpers.maxRecordingTime) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.maxRecordingTime); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"large\\\" data-increment=\\\"5\\\" data-min=\\\"5\\\" data-max=\\\"\";\n  if (helper = helpers.maximumRecordingTimeLimit) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.maximumRecordingTimeLimit); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" type=\\\"text\\\" />\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In seconds. Maximum recording time allowed (cannot be less than 5 seconds). Recording will automatically stop once reached.\", options) : helperMissing.call(depth0, \"__\", \"In seconds. Maximum recording time allowed (cannot be less than 5 seconds). Recording will automatically stop once reached.\", options)))\n    + \"\\r\\n    </span>\\r\\n</div>\\r\\n\\r\\n<hr />\\r\\n<div class=\\\"panel\\\">\\r\\n    <label for=\\\"is-compressed\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Recording format\", options) : helperMissing.call(depth0, \"__\", \"Recording format\", options)))\n    + \"</label>\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"With compressed recording, the audio is saved as a webm or ogg file (smaller size). With uncompressed, as a lossless Wav file (much bigger size).\", options) : helperMissing.call(depth0, \"__\", \"With compressed recording, the audio is saved as a webm or ogg file (smaller size). With uncompressed, as a lossless Wav file (much bigger size).\", options)))\n    + \"\\r\\n    </span>\\r\\n    <select id=\\\"is-compressed\\\" name=\\\"isCompressed\\\">\\r\\n        <option value=\\\"true\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isCompressed), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Compressed\", options) : helperMissing.call(depth0, \"__\", \"Compressed\", options)))\n    + \"</option>\\r\\n        <option value=\\\"false\\\"\";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isCompressed), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Uncompressed\", options) : helperMissing.call(depth0, \"__\", \"Uncompressed\", options)))\n    + \"</option>\\r\\n    </select>\\r\\n</div>\\r\\n\\r\\n<div data-role=\\\"compressedOptions\\\" \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isCompressed), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\\r\\n    <div class=\\\"panel\\\">\\r\\n        <label for=\\\"audio-bitrate\\\" class=\\\"spinner\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Audio bitrate:\", options) : helperMissing.call(depth0, \"__\", \"Audio bitrate:\", options)))\n    + \"</label>\\r\\n        <input id=\\\"audio-bitrate\\\" name=\\\"audioBitrate\\\" value=\\\"\";\n  if (helper = helpers.audioBitrate) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.audioBitrate); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"large\\\" data-increment=\\\"1000\\\" data-min=\\\"8000\\\" type=\\\"text\\\" />\\r\\n        <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n        <span class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In bps (bits per second). Set the tradeoff between audio quality and filesize. With the default value (20.000bps), a 2minutes recording weights roughly 300KB.\", options) : helperMissing.call(depth0, \"__\", \"In bps (bits per second). Set the tradeoff between audio quality and filesize. With the default value (20.000bps), a 2minutes recording weights roughly 300KB.\", options)))\n    + \"\\r\\n        </span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div data-role=\\\"uncompressedOptions\\\"  \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isCompressed), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\\r\\n    <div class=\\\"panel\\\">\\r\\n        <label for=\\\"is-stereo\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Channels\", options) : helperMissing.call(depth0, \"__\", \"Channels\", options)))\n    + \"</label>\\r\\n        <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n        <span class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Number of channels for the recording. Allow to cut the record size in half if used in mono.\", options) : helperMissing.call(depth0, \"__\", \"Number of channels for the recording. Allow to cut the record size in half if used in mono.\", options)))\n    + \"\\r\\n        </span>\\r\\n        <select id=\\\"is-stereo\\\" name=\\\"isStereo\\\">\\r\\n            <option value=\\\"false\\\"\";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.isStereo), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Mono\", options) : helperMissing.call(depth0, \"__\", \"Mono\", options)))\n    + \"</option>\\r\\n            <option value=\\\"true\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isStereo), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Stereo\", options) : helperMissing.call(depth0, \"__\", \"Stereo\", options)))\n    + \"</option>\\r\\n        </select>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<hr />\\r\\n\\r\\n<h3 class=\\\"txt-error\\\"><strong><span class=\\\"icon-warning\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"For tests only\", options) : helperMissing.call(depth0, \"__\", \"For tests only\", options)))\n    + \"</strong></h3>\\r\\n\\r\\n<div class=\\\"panel\\\">\\r\\n    <label>\\r\\n        <input name=\\\"displayDownloadLink\\\" type=\\\"checkbox\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.displayDownloadLink), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"/>\\r\\n        <span class=\\\"icon-checkbox\\\"></span>\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow download\", options) : helperMissing.call(depth0, \"__\", \"Allow download\", options)))\n    + \"\\r\\n    </label>\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This is for testing purposes only. Displays a link to download the recorded file once the recording stops. This shouldn't be used in a delivery context, as it would allow the test taker to download its own recording.\", options) : helperMissing.call(depth0, \"__\", \"This is for testing purposes only. Displays a link to download the recorded file once the recording stops. This shouldn't be used in a delivery context, as it would allow the test taker to download its own recording.\", options)))\n    + \"\\r\\n    </span>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"panel\\\">\\r\\n    <label for=\\\"partial-update-interval\\\" class=\\\"spinner\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Update interval:\", options) : helperMissing.call(depth0, \"__\", \"Update interval:\", options)))\n    + \"</label>\\r\\n    <input id=\\\"partial-update-interval\\\" name=\\\"partialUpdateInterval\\\" value=\\\"\";\n  if (helper = helpers.partialUpdateInterval) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.partialUpdateInterval); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"large\\\" data-increment=\\\"1\\\" data-min=\\\"1\\\" data-max=\\\"60\\\" type=\\\"text\\\" />\\r\\n    <span class=\\\"icon-help tooltipstered\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n    <span class=\\\"tooltip-content\\\">\\r\\n        \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In seconds. The time interval between partial updates of the recording.\", options) : helperMissing.call(depth0, \"__\", \"In seconds. The time interval between partial updates of the recording.\", options)))\n    + \"\\r\\n    </span>\\r\\n</div>\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017-2022 (original work) Open Assessment Technologies SA;\r\n */\r\ndefine('audioRecordingInteraction/creator/widget/states/Question',[\r\n    'lodash',\r\n    'i18n',\r\n    'jquery',\r\n    'module',\r\n    'taoQtiItem/qtiCreator/widgets/states/factory',\r\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\r\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\r\n    'taoQtiItem/qtiCreator/widgets/helpers/pciMediaManager/pciMediaManager',\r\n    'taoQtiItem/qtiCreator/editor/simpleContentEditableElement',\r\n    'tpl!audioRecordingInteraction/creator/tpl/propertiesForm',\r\n    'util/typeCaster'\r\n], function (\r\n    _,\r\n    __,\r\n    $,\r\n    module,\r\n    stateFactory,\r\n    Question,\r\n    formElement,\r\n    pciMediaManagerFactory,\r\n    simpleEditor,\r\n    formTpl,\r\n    typeCaster\r\n) {\r\n    'use strict';\r\n\r\n    var AudioRecordingInteractionStateQuestion = stateFactory.extend(\r\n        Question,\r\n        function create() {},\r\n        function destroy() {\r\n            var $container = this.widget.$container;\r\n\r\n            simpleEditor.destroy($container);\r\n        }\r\n    );\r\n\r\n    /**\r\n     * Change callback of form values\r\n     * @param {Object} interaction\r\n     * @param {*} value\r\n     * @param {String} name\r\n     */\r\n    function configChangeCallBack(interaction, value, name) {\r\n        interaction.prop(name, value);\r\n        interaction.triggerPci('configChange', [interaction.getProperties()]);\r\n    }\r\n\r\n    AudioRecordingInteractionStateQuestion.prototype.initForm = function initForm() {\r\n        var _widget = this.widget,\r\n            $form = _widget.$form,\r\n            interaction = _widget.element,\r\n            response = interaction.getResponseDeclaration(),\r\n            $compressedOptions,\r\n            $uncompressedOptions,\r\n            $delayOptions;\r\n\r\n        var pciMediaManager = pciMediaManagerFactory(_widget);\r\n\r\n        //render the form using the form template\r\n        $form.html(\r\n            formTpl(\r\n                _.defaults({}, module.config(), {\r\n                    serial: response.serial,\r\n                    identifier: interaction.attr('responseIdentifier'),\r\n\r\n                    allowPlayback: typeCaster.strToBool(interaction.prop('allowPlayback'), true),\r\n                    autoStart: typeCaster.strToBool(interaction.prop('autoStart'), false),\r\n                    autoPlayback: typeCaster.strToBool(interaction.prop('autoPlayback'), false),\r\n\r\n                    delayMinutes: interaction.prop('delayMinutes'),\r\n                    delaySeconds: interaction.prop('delaySeconds'),\r\n\r\n                    maxRecords: interaction.prop('maxRecords'),\r\n                    maxRecordingTime: interaction.prop('maxRecordingTime'),\r\n\r\n                    isCompressed: typeCaster.strToBool(interaction.prop('isCompressed'), true),\r\n                    audioBitrate: interaction.prop('audioBitrate'),\r\n                    isStereo: typeCaster.strToBool(interaction.prop('isStereo'), false),\r\n\r\n                    updateResponsePartially: typeCaster.strToBool(interaction.prop('updateResponsePartially'), true),\r\n                    partialUpdateInterval: parseInt(interaction.prop('partialUpdateInterval'), 10) / 1000,\r\n\r\n                    displayDownloadLink: typeCaster.strToBool(interaction.prop('displayDownloadLink'), false)\r\n                })\r\n            )\r\n        );\r\n\r\n        $compressedOptions = $form.find('[data-role=\"compressedOptions\"]');\r\n        $uncompressedOptions = $form.find('[data-role=\"uncompressedOptions\"]');\r\n\r\n        $delayOptions = $form.find('[data-role=\"delayOptions\"]');\r\n\r\n        //init form javascript\r\n        formElement.initWidget($form);\r\n\r\n        //init data change callbacks\r\n        formElement.setChangeCallbacks(\r\n            $form,\r\n            interaction,\r\n            _.assign(\r\n                {\r\n                    identifier: function identifier(i, value) {\r\n                        response.id(value);\r\n                        interaction.attr('responseIdentifier', value);\r\n                    },\r\n\r\n                    allowPlayback: configChangeCallBack,\r\n\r\n                    autoStart: function autoStart(boundInteraction, value, name) {\r\n                        if (value) {\r\n                            $delayOptions.show();\r\n                        } else {\r\n                            $delayOptions.hide();\r\n                        }\r\n                        configChangeCallBack(boundInteraction, value, name);\r\n                    },\r\n                    autoPlayback: configChangeCallBack,\r\n\r\n                    delayMinutes: configChangeCallBack,\r\n                    delaySeconds: configChangeCallBack,\r\n\r\n                    maxRecords: configChangeCallBack,\r\n                    maxRecordingTime: configChangeCallBack,\r\n\r\n                    isCompressed: function isCompressed(boundInteraction, value, name) {\r\n                        if (value === 'true') {\r\n                            $uncompressedOptions.hide();\r\n                            $compressedOptions.show();\r\n                        } else {\r\n                            $uncompressedOptions.show();\r\n                            $compressedOptions.hide();\r\n                        }\r\n                        configChangeCallBack(boundInteraction, value, name);\r\n                    },\r\n                    audioBitrate: configChangeCallBack,\r\n                    isStereo: configChangeCallBack,\r\n\r\n                    partialUpdateInterval: function partialUpdateInterval(boundInteraction, value, name) {\r\n                        value = parseFloat(value) * 1000;\r\n                        configChangeCallBack(boundInteraction, value, name);\r\n                    },\r\n\r\n                    displayDownloadLink: configChangeCallBack\r\n                },\r\n                pciMediaManager.getChangeCallbacks()\r\n            )\r\n        );\r\n\r\n        pciMediaManager.init();\r\n    };\r\n\r\n    return AudioRecordingInteractionStateQuestion;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017-2022 (original work) Open Assessment Technologies SA;\r\n */\r\ndefine('audioRecordingInteraction/creator/widget/states/states',[\r\n    'taoQtiItem/qtiCreator/widgets/states/factory',\r\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\r\n    'audioRecordingInteraction/creator/widget/states/Question'\r\n], function (factory, states) {\r\n    'use strict';\r\n\r\n    return factory.createBundle(states, arguments, ['answer', 'correct', 'map']);\r\n});\r\n\n","\ndefine('css!audioRecordingInteraction/creator/css/audioRecordingInteraction',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017-2022 (original work) Open Assessment Technologies SA;\r\n */\r\ndefine('audioRecordingInteraction/creator/widget/Widget',[\r\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\r\n    'audioRecordingInteraction/creator/widget/states/states',\r\n    'css!audioRecordingInteraction/creator/css/audioRecordingInteraction'\r\n], function (Widget, states) {\r\n    'use strict';\r\n\r\n    var AudioRecordingInteractionWidget = Widget.clone();\r\n\r\n    AudioRecordingInteractionWidget.initCreator = function () {\r\n        var $interaction;\r\n\r\n        this.registerStates(states);\r\n\r\n        Widget.initCreator.call(this);\r\n\r\n        $interaction = this.$container.find('.audioRecordingInteraction');\r\n        if ($interaction.length) {\r\n            $interaction.addClass('tao-qti-creator-context');\r\n        }\r\n    };\r\n\r\n    return AudioRecordingInteractionWidget;\r\n});\r\n\n","\ndefine('tpl!audioRecordingInteraction/creator/tpl/markup', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"audioRecordingInteraction\\\">\\r\\n    <div class=\\\"audio-rec\\\">\\r\\n        <div class=\\\"input-meter\\\">\\r\\n            <div class=\\\"countdown-pie-chart\\\"> </div>\\r\\n            <div class=\\\"leds\\\"> </div>\\r\\n            <div class=\\\"mic\\\"> </div>\\r\\n        </div>\\r\\n        <div class=\\\"progress\\\"> </div>\\r\\n        <div class=\\\"controls\\\"> </div>\\r\\n    </div>\\r\\n</div>\";\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017-2021 (original work) Open Assessment Technologies SA;\r\n */\r\ndefine('audioRecordingInteraction/imsPciCreator',[\r\n    'lodash',\r\n    'taoQtiItem/qtiCreator/editor/customInteractionRegistry',\r\n    'audioRecordingInteraction/creator/widget/Widget',\r\n    'tpl!audioRecordingInteraction/creator/tpl/markup'\r\n], function (_, ciRegistry, Widget, markupTpl) {\r\n    'use strict';\r\n\r\n    var _typeIdentifier = 'audioRecordingInteraction';\r\n\r\n    var audioRecordingInteractionCreator = {\r\n        /**\r\n         * (required) Get the typeIdentifier of the custom interaction\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTypeIdentifier: function getTypeIdentifier() {\r\n            return _typeIdentifier;\r\n        },\r\n        /**\r\n         * (required) Get the widget prototype\r\n         * Used in the renderer\r\n         *\r\n         * @returns {Object} Widget\r\n         */\r\n        getWidget: function getWidget() {\r\n            var defaultProperties;\r\n            Widget.beforeStateInit(function (event, pci) {\r\n                if (pci.typeIdentifier && pci.typeIdentifier === _typeIdentifier) {\r\n                    // ensure all the properties get a default value\r\n                    defaultProperties = audioRecordingInteractionCreator.getDefaultProperties();\r\n                    _.forEach(defaultProperties, function(value, name) {\r\n                        if ((typeof pci.properties[name] === 'undefined') ||\r\n                            (typeof pci.properties[name] === 'string' && !pci.properties[name] && typeof value !== 'string')) {\r\n                            pci.properties[name] = value;\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            return Widget;\r\n        },\r\n        /**\r\n         * (optional) Get the default properties values of the pci.\r\n         * Used on new pci instance creation\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getDefaultProperties: function getDefaultProperties() {\r\n            return {\r\n                isReviewMode: false,\r\n                allowPlayback: true,\r\n                autoStart: false,\r\n                autoPlayback: false,\r\n\r\n                delayMinutes: 0,\r\n                delaySeconds: 0,\r\n\r\n                maxRecords: 2,\r\n                maxRecordingTime: 120,\r\n\r\n                isCompressed: true,\r\n                audioBitrate: 20000,\r\n                isStereo: false,\r\n\r\n                media: {\r\n                    autostart: true,\r\n                    replayTimeout: 5,\r\n                    maxPlays: 2\r\n                },\r\n\r\n                displayDownloadLink: false,\r\n                updateResponsePartially: true,\r\n                partialUpdateInterval: 1000\r\n            };\r\n        },\r\n        /**\r\n         * (optional) Callback to execute on the\r\n         * Used on new pci instance creation\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        afterCreate: function afterCreate() {\r\n            //do some stuff\r\n        },\r\n        /**\r\n         * (required) Gives the qti pci xml template\r\n         *\r\n         * @returns {function} handlebar template\r\n         */\r\n        getMarkupTemplate: function getMarkupTemplate() {\r\n            return markupTpl;\r\n        },\r\n        /**\r\n         * (optional) Allows passing additional data to xml template\r\n         *\r\n         * @param {Object} pci\r\n         * @param {Object} defaultData\r\n         * @returns {Object} handlebar template\r\n         */\r\n        getMarkupData: function getMarkupData(pci, defaultData) {\r\n            return defaultData;\r\n        }\r\n    };\r\n\r\n    //since we assume we are in a tao context, there is no use to expose the a global object for lib registration\r\n    //all libs should be declared here\r\n    return audioRecordingInteractionCreator;\r\n});\r\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('.item-editor-interaction-related div[data-role=\\\"delayOptions\\\"] .panel{margin-top:-15px}.item-editor-interaction-related div[data-role=\\\"delayOptions\\\"] .panel label[for=\\\"delayMinutes\\\"]{min-width:0}.item-editor-interaction-related div[data-role=\\\"delayOptions\\\"] .panel label[for=\\\"delaySeconds\\\"]{min-width:0;padding-left:18px}\\r\\n\\r\\n/*# sourceMappingURL=audioRecordingInteraction.css.map */');\n"]}